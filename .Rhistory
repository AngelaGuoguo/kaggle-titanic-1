as.Date
?as.Date
dyears(1)
rank_birthdays <- function(...) {
fixed_instance <- now()
bdates <- list(...)
len <- length(bdates)
secs <- c()
ages <- c()
for (i in 1:len) {
interval <- new_interval(ymd_hms(bdates[[i]]), fixed_instance)
in_seconds <- interval / dseconds(1)
age <- interval / dyears(1)
secs <- c(secs, in_seconds)
ages <- c(ages, age)
}
print("the total age disparity between the youngest and oldest
user in seconds is ")
print(max(secs) - min(secs))
secs <- sort(secs)
ages <- sort(ages)
ages <- floor(ages)
birth_dates <- data.frame(birthday = secs, age = ages)
return(birth_dates)
}
q <- c("2009-01-01 08:30:00",
"1986-12-20 19:16:30",
"1959-1-27 19:16:30",
"1922-2-22 22:22:22")
rank_birthdays(q)
as.Date(q)
ymd_hms(q)
problem1 <- function(...) {
now <- now()
ages <- interval(ymd_hms(...), now)
ages <- duration(ages, "weeks") / dyears(1)
ages <- floor(ages)
ages
}
problem1(q)
q
problem1 <- function(...) {
now <- now()
ages <- interval(ymd_hms(...), now)
ages <- duration(ages) / dyears(1)
ages <- floor(ages)
ages
}
problem1(q)
problem1 <- function(...) {
now <- now()
ages <- interval(ymd_hms(...), now)
ages <- duration(ages) / dyears(1)
ages <- floor(ages)
ages
table <- data.frame(birthday = ..., age = ages)
table
}
problem1(q)
str(ymd_hms(q))
?order
?sort
??order
?as.Date
problem1 <- function(...) {
now <- now()
ages <- interval(ymd_hms(...), now)
ages <- duration(ages) / dyears(1)
ages <- floor(ages)
table <- data.frame(birthday = ymd_hms(...), age = ages)
table <- table[order(birthday),]
table
}
problem1(rev(q))
problem1(q)
problem1 <- function(...) {
now <- now()
ages <- interval(ymd_hms(...), now)
ages <- duration(ages) / dyears(1)
ages <- floor(ages)
table <- data.frame(bdays = ymd_hms(...), age = ages)
table <- table[order(bdays),]
table
}
problem1(q)
example(order)
?date.frame
?data.frame
?order
problem1 <- function(...) {
now <- now()
ages <- interval(ymd_hms(...), now)
ages <- duration(ages) / dyears(1)
ages <- floor(ages)
table <- data.frame(birthday = ymd_hms(...), age = ages)
colnames(table) <- c("birthday", "age")
table <- table[order(birthday, decreasing = TRUE),]
table
}
problem1(q)
problem1 <- function(...) {
now <- now()
ages <- interval(ymd_hms(...), now)
ages <- duration(ages) / dyears(1)
ages <- floor(ages)
table <- data.frame(birthday = ymd_hms(...), age = ages)
colnames(table) <- c("birthday", "age")
table <- table[order(table$birthday, decreasing = TRUE),]
table
}
problem1(q)
problem1(rev(q))
problem1 <- function(...) {
now <- now()
ages <- interval(ymd_hms(...), now)
ages <- duration(ages) / dyears(1)
ages <- floor(ages)
table <- data.frame(birthday = ymd_hms(...), age = ages)
colnames(table) <- c("birthday", "age")
table <- table[order(table$birthday, decreasing = TRUE),]
rownames(table) <- NULL
table
}
problem1(q)
problem1(rev(q))
?interval
problem1 <- function(...) {
# Set the current date and time
now <- now()
# Create an interval object from the birthdays to now
ages <- interval(ymd_hms(...), now)
# Get the duration in years
ages <- duration(ages) / dyears(1)
# Only want full years
ages <- floor(ages)
# Create table that has birthdays and ages
# Sort from youngest to oldest and spit back the table
table <- data.frame(birthday = ymd_hms(...), age = ages)
colnames(table) <- c("birthday", "age")
table <- table[order(table$birthday, decreasing = TRUE),]
rownames(table) <- NULL
table
max <- max(table$birthdays)
min <- min(table$birthdays)
disparity <- interval(min, max)
disparity <- duration(disparity)
disparity
}
problem1(q)
problem1 <- function(...) {
# Set the current date and time
now <- now()
# Create an interval object from the birthdays to now
ages <- interval(ymd_hms(...), now)
# Get the duration in years
ages <- duration(ages) / dyears(1)
# Only want full years
ages <- floor(ages)
# Create table that has birthdays and ages
# Sort from youngest to oldest and spit back the table
table <- data.frame(birthday = ymd_hms(...), age = ages)
colnames(table) <- c("birthday", "age")
table <- table[order(table$birthday, decreasing = TRUE),]
rownames(table) <- NULL
table
#   max <- max(table$birthdays)
#   min <- min(table$birthdays)
#   disparity <- interval(min, max)
#   disparity <- duration(disparity)
#   disparity
}
problem1(q)
problem1(rev(q))
?in_seconds
now <- now()
# Create an interval object from the birthdays to now
ages <- interval(ymd_hms(q), now)
# Get the duration in years
ages <- duration(ages) / dyears(1)
# Only want full years
ages <- floor(ages)
# Create table that has birthdays and ages
# Sort from youngest to oldest and spit back the table
table <- data.frame(birthday = ymd_hms(q), age = ages)
colnames(table) <- c("birthday", "age")
table <- table[order(table$birthday, decreasing = TRUE),]
rownames(table) <- NULL
table
max <- max(table$birthdays)
min <- min(table$birthdays)
disparity <- interval(min, max)
disparity <- duration(disparity)
disparity
table
table$birthday
problem1 <- function(...) {
# Set the current date and time
now <- now()
# Create an interval object from the birthdays to now
ages <- interval(ymd_hms(...), now)
# Get the duration in years
ages <- duration(ages) / dyears(1)
# Only want full years
ages <- floor(ages)
# Create table that has birthdays and ages
# Sort from youngest to oldest and spit back the table
table <- data.frame(birthday = ymd_hms(...), age = ages)
colnames(table) <- c("birthday", "age")
table <- table[order(table$birthday, decreasing = TRUE),]
rownames(table) <- NULL
table
max <- max(table$birthday)
min <- min(table$birthday)
disparity <- interval(min, max)
disparity <- duration(disparity)
disparity
}
problem1(q)
rank_birthdays(q)
?print
?cat
?ymd_hms
problem1 <- function(...) {
# Set the current date and time
now <- now()
# Create an interval object from the birthdays to now
ages <- interval(ymd_hms(..., quiet = T), now)
# Get the duration in years
ages <- duration(ages) / dyears(1)
# Only want full years
ages <- floor(ages)
# Create table that has birthdays and ages
# Sort from youngest to oldest and spit back the table
table <- data.frame(birthday = ymd_hms(..., quiet = T), age = ages)
colnames(table) <- c("birthday", "age")
table <- table[order(table$birthday, decreasing = TRUE),]
rownames(table) <- NULL
print(table)
max <- max(table$birthday)
min <- min(table$birthday)
disparity <- interval(min, max)
disparity <- duration(disparity)
cat("Age disparity between youngest and older user in seconds is", disparity)
}
problem1(q)
problem1 <- function(...) {
# Set the current date and time
now <- now()
# Create an interval object from the birthdays to now
ages <- interval(ymd_hms(..., quiet = T), now)
# Get the duration in years
ages <- duration(ages) / dyears(1)
# Only want full years
ages <- floor(ages)
# Create table that has birthdays and ages
# Sort from youngest to oldest and spit back the table
table <- data.frame(birthday = ymd_hms(..., quiet = T), age = ages)
colnames(table) <- c("birthday", "age")
table <- table[order(table$birthday, decreasing = TRUE),]
rownames(table) <- NULL
print(table)
# Get max, min, create interval and find length in seconds
max <- max(table$birthday)
min <- min(table$birthday)
disparity <- interval(min, max)
disparity <- duration(disparity)
cat("Age disparity between youngest and older observation in seconds is",
disparity, ".")
}
problem1(q)
problem1(rev(q))
library(caret)
library(randomForest)
library(kernlab)
library(nnet)
load("Data/train_clean.RData")  # 891 obs
load("Data/test_clean.RData")   # 418 obs
setwd("C:/Ruby193/_site/kaggle-titanic")
load("Data/train_clean.RData")  # 891 obs
load("Data/test_clean.RData")   # 418 obs
?train
train(survived ~ sex.name + pclass + age_scale + fare_scale, data = train,)
train(survived ~ sex.name + pclass + age_scale + fare_scale, data = train, method = "gbm")
train(survived ~ sex.name + pclass + age_scale + fare_scale, data = train, method = "randomForest")
train(survived ~ sex.name + pclass + age_scale + fare_scale, data = train, method = "nnet")
?trainControl
?train
?train
?nnet
?train
netControl <- trainControl(method = "repeatedcv", number = 9,
repeats = 20)
train(survived ~ sex.name + pclass + age_scale + fare_scale,
data = train, method = "nnet", size = 5, decay = 1e-04,
trControl = netControl)
?train
list
?list
netControl <- trainControl(method = "repeatedcv", number = 9,
repeats = 20)
train(survived ~ sex.name + pclass + age_scale + fare_scale,
data = train, method = "nnet", contrasts = list(size = 5, decay = 1e-04),
trControl = netControl)
?trainControl
netControl <- trainControl(method = "repeatedcv", number = 890,
repeats = 500)
train(survived ~ sex.name + pclass + age_scale + fare_scale,
data = train, method = "nnet",
trControl = netControl)
netControl <- trainControl(method = "repeatedcv", number = 10,
repeats = 10)
netTrain <- train(survived ~ sex.name + pclass + age_scale + fare_scale,
data = train, method = "nnet",
trControl = netControl)
netTrain
adaControl <- trainControl(method = "repeatedcv", number = 10,
repeats = 10)
adaTrain <- train(survived ~ sex.name + pclass + age_scale + fare_scale,
data = train, method = "ada",
trControl = adaControl)
adaControl <- trainControl(method = "cv", number = 10)
adaTrain <- train(survived ~ sex.name + pclass + age_scale + fare_scale,
data = train, method = "ada",
trControl = adaControl)
adaTrain
netControl <- trainControl(method = "repeatedcv", number = 10,
repeats = 10)
train(survived ~ sex.name + pclass + age + fare,
data = train, method = "nnet",
trControl = netControl)
install.packages("caTools")
?train
?preProcess
logitControl <- trainControl(method = "repeatedcv", number = 10,
repeats = 10)
logitTrain <- train(survived ~ sex.name + pclass + age_scale + fare_scale,
data = train, method = "logitBoost",
trControl = logitControl)
logitTrain
rstudio::viewData(test)
test$survived <- predict(logitTrain, test)
rstudio::viewData(test)
?logitBoost
library(caTools)
?logitBoost
??logitBoost
predict(logitTrain, test)
test$survived <- predict.LogitBoost(logitTrain, test)
test$survived <- predict(logitTrain, test)
test$survived
predict(logitTrain, train)
summary(logitTrain)
logitTrain
testLogit <- test
testLogit <- testLogit
rstudio::viewData(testLogit)
testLogit <- testLogit[,c(15, 16, 12, 8)]
test$survived <- predict(logitTrain, testLogit)
rstudio::viewData(testLogit)
rstudio::viewData(test)
testLogit <- test
testLogit <- testLogit[,c(15, 16, 12, 1)]
test$survived <- predict(logitTrain, testLogit)
test$survived
rstudio::viewData(testLogit)
predict(logitTrain, testLogit)
train <- train
trainLogit <- trainLogit[,c(15, 16, 12, 1)]
trainLogit <- train
trainLogit <- trainLogit[,c(15, 16, 12, 1)]
LogitBoost(trainLogit, train$survived, nIter = 50)
rstudio::viewData(train)
LogitBoost(trainLogit, train[,1], nIter = 50)
install.packages("rpoart")
install.packages("rpart")
rpartControl <- trainControl(method = "repeatedcv", number = 10,
repeats = 10)
rpartTrain <- train(survived ~ sex.name + pclass + age_scale + fare_scale,
data = train, method = "rpart",
trControl = rparttControl)
rpartControl <- trainControl(method = "repeatedcv", number = 10,
repeats = 10)
rpartTrain <- train(survived ~ sex.name + pclass + age_scale + fare_scale,
data = train, method = "rpart",
trControl = rpartControl)
rpartTrain
logitTrain
?rpart
logitTrain
names(logitTrain)
logitTrain$modelType
logitTrain$trainingData
names(logitTrain)
logitTrain$method
logitTrain$call
logitTrain$results
logitTrain$finalModel
?LogitBoost
testLogit <- test
testLogit <- testLogit[,c(15, 16, 12, 1)]
rstudio::viewData(test)
testLogitpred <- test[,11]
testLogitpred <- as.numeric(testLogitpred)
fix(testLogitpred)
testLogit <- test
testLogit <- testLogit[,c(15, 16, 12, 1)]
testLogit
str(testLogit$survived)
str(test$survived)
test$survived
rstudio::viewData(test)
load("Data/train_clean.RData")  # 891 obs
load("Data/test_clean.RData")   # 418 obs
rstudio::viewData(test)
train$survived
str(train$survived)
testLogit <- test
testLogit <- testLogit[,c(15, 16, 12, 1)]
testLogitpred <- test[,11]
testLogitpred <- as.numeric(testLogitpred)
testLogitpred
test$survived <- predict(logitTrain, testLogit)
test$survived
testLogitpred
trainLogit
LogitBoost(trainLogit, as.numeric(train[,1]))
as.numeric(train[,1])
LogitBoost)(train[,-1], train[,1])
LogitBoost(train[,-1], train[,1])
train[,-1]
?rf
??rf
library(randomForest)
?rf
install.packages("bst")
library(Bst)
library(bst)
?bst
bstControl <- trainControl(method = "repeatedcv", number = 10,
repeats = 10)
bstTrain <- train(survived ~ sex.name + pclass + age_scale + fare_scale,
data = train, method = "bst",
trControl = bstControl)
bstControl <- trainControl(method = "repeatedcv", number = 10,
repeats = 10)
bstTrain <- train(survived ~ sex.name + pclass + age_scale + fare_scale,
data = train, method = "bstTree",
trControl = bstControl)
rpartTrain
predict(logitTrain, testLogit)
logitTrain
adaTrain
predict(adaTrain, test)
test$survived <- predict(adaTrain, test)
write.csv(test, "Submissions/caretsemble-01.csv")
test
adaTrain
lfControl <- trainControl(method = "repeatedcv", number = 10,
repeats = 10)
lfTrain <- train(survived ~ sex.name + pclass + age_scale + fare_scale,
data = train, method = "logforest",
trControl = lfControl)
lfControl <- trainControl(method = "repeatedcv", number = 10,
repeats = 10)
lfTrain <- train(survived ~ sex.name + pclass + age_scale + fare_scale,
data = train, method = "C5.0",
trControl = lfControl)
lfTrain
lfControl <- trainControl(method = "repeatedcv", number = 10,
repeats = 10)
lfTrain <- train(survived ~ sex.name + pclass + age_scale + fare_scale,
data = train, method = "svmPoly",
trControl = lfControl)
lfTrain
rstudio::viewData(train)
netTrain <- train(survived ~ sex.name + pclass + age_scale + fare_scale + embarked + age,
data = train, method = "nnet",
trControl = netControl)
netTrain
install.packages("mboost")
library(mboost)
?glmboost
?trainControl
glmControl <- trainControl(method = "LOOCV")
glmTrain <- train(survived ~ ., data = train, method = "bstTree",
glmControl = glmControl)
rstudio::viewData(train)
glmTrain
glmControl <- trainControl(method = "LOOCV")
glmTrain <- train(survived ~ ., data = train, method = "glmboost",
glmControl = glmControl)
warnings()
glmControl <- trainControl(method = "LOOCV")
glmTrain <- train(survived ~ sex + sex.name + pclass + age +
age_scale + fare + fare_scale + embarked,
data = train, method = "glmboost",
glmControl = glmControl)
netTrain <- train(survived ~ sex.name + pclass + age_scale + fare_scale,
data = train, method = "nnet",
trControl = netControl)
netTrain
glmControl <- trainControl(method = "LOOCV")
glmTrain <- train(survived ~ sex + sex.name + pclass + age +
age_scale + fare + fare_scale + embarked,
data = train, method = "glmboost",
trControl = glmControl)
glmTrain
rpartTrain
netTrain
test2 <- test
test2$survived <- predict(netTrain, test2)
write.csv(test2, "Submissions/caretsemble-02.csv")
