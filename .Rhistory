install.packages('plyr')
install.packages('gbm')
library(gbm)
setwd("U:/kaggle-titanic")
library(gbm)
library(plyr)
load("Data/train_clean.RData")  # 891 obs
load("Data/test_clean.RData")   # 418 obs
# Goal:     (1) Construct basic randomForest models from the data
#           (2) Select the best model (Model selection)
#           (3) Save a prediction with our best randomForest
library(gbm)
library(plyr)
# Load in the cleaned data sets
load("Data/train_clean.RData")  # 891 obs
load("Data/test_clean.RData")   # 418 obs
###
### Create randomForest model
###
# Create random forest based on PCLASS, SEX, FARE, AGE
gbm <- gbm(survived ~ sex + pclass + fare + age)
gbm <- gbm(survived ~ sex + pclass + fare + age, data = train)
?gbm
gbm <- gbm(survived ~ sex + pclass + fare + age, data = train, distribution = "AdaBoost")
gbm <- gbm(survived ~ sex + pclass + fare + age, data = train, distribution = "adaboost")
train$survived_pred <- predict(gbm, train)
gbm <- gbm(survived ~ sex + pclass + fare + age,
data = train, distribution = "adaboost", n.trees = 500)
train$survived_pred <- predict(gbm, train)
train$survived_pred <- predict(gbm, train, n.trees = 500)
test$survived <- predict(gbm, test, n.trees = 500)
predict(gbm, train, n.trees = 500)
predict(forest, test)
source("2-randomForest.R")
install.packages('randomforest')
install.packages('randomForest')
train$survived_pred <- predict(gbm, train, n.trees = 500, type = "response")
predict(gbm, train, n.trees = 500, type = "response")
library(randomForest)
forest <- randomForest(survived ~ sex + pclass + fare + age,
data = train, ntree = 15000, importance = TRUE)
predict(forest, train)
predict(svm.model, test, type = "response")
source("3-SVM.R")
install.packages('kernlab')
predict(svm.model, test, type = "response")
source("3-SVM.R")
test$survived_svm <- predict(svm.model, test, type = "response")
predict(svm.model, test, type = "response")
predict(forest, test)
predict(gbm, test)
predict(gbm, train, n.trees = 500, type = "response")
predict(gbm, test, n.trees = 500)
# Goal: (1) Combine our three models into one prediction:
#             - randomForest
#             - SVM
#             - probit
# Source our models
source("2-randomForest.R")
source("3-SVM.R")
#source("4-probit.R")
source("4-gbm.R")
###
### Gather predictions
###
# randomForest
test$survived_rf <- predict(forest, test)
# SVM
test$survived_svm <- predict(svm.model, test, type = "response")
# Probit
#test$survived_probit <- predict(probit, test)
#test$survived_probit[test$survived >= 0.5] <- 2
#test$survived_probit[test$survived < 0.5] <- 1
# gbm
test$survived_gbm <- predict(gbm, test, n.trees = 500)
test$survived_gbm[test$survived_gbm >= 1] <- 1
test$survived_gbm[test$survived_gbm < 1] <- 0
###
### Combine Predictions
###
combined <- as.numeric(test$survived_rf) +
as.numeric(test$survived_svm) +
as.numeric(test$survived_probit)
# 3 is 0
# 4 is 0
# 5 is 1
# 6 is 1
combined[combined <= 4] <- 0
combined[combined >= 5] <- 1
# Make our ensamble prediction
test$survived <- combined
write.csv(test, "Submissions/ensemble-04.csv")
test$survived_gbm[test$survived_gbm < 1]
test$survived_gbm[test$survived_gbm >= 1]
combined <- as.numeric(test$survived_rf) +
as.numeric(test$survived_svm) +
as.numeric(test$survived_gbm)
combined[combined <= 4] <- 0
combined[combined >= 5] <- 1
# Make our ensamble prediction
test$survived <- combined
write.csv(test, "Submissions/ensemble-04.csv")
predict(probit, test, type = "response")
source("4-probit.R")
predict(probit, test, type = "response")
?predict.probit
predict(probit, test, type = "response", add = TRUE)
?glm
?predict.glm
test$survived_probit <- predict(probit, test, type = "response", lty = 1)
predict(probit, test, type = "response", lty = 1)
test$survived_probit <- predict(probit, test, type = "response")
str(train)
str(train$nname)
str(train$name)
table(train$name)
female <- subset(train, sex = "F")
female$name
female <- subset(train, sex == "F")
female
str(train)
female <- subset(train, sex == "female")
female$name
install.packages('stringr')
library(stringr)
?str_match
str_match(female$name, "Miss")
miss <- str_match(female$name, "Miss")
female$name
mrs <- str_match(femmale$name, "Mrs")
mrs <- str_match(female$name, "Mrs")
length(female)
length(female$name)
length(miss$name) + length(mrs$name)
length(miss$name) + length(mrs$name)
mrs <- str_match(female$name, "Mrs")
mrs
miss <- !is.na(str_match(female$name, "Miss"))
miss
miss <- (str_match(female$name, "Miss")
miss <- str_match(female$name, "Miss")
miss <- str_match(female$name, "Miss")
female <- subset(train, sex == "female")
miss <- str_match(female$name, "Miss")
mrs <- str_match(female$name, "Mrs")
miss
mrs <- str_match(female$name, "Mrs")
predict(probit, test, type = "response")
summary(probit)
predict(probit, test, type = "response")
install.packages()
install.packages('mi')
library(mi)
library(mi)
which(is.na(train$pclass))
which(is.na(test$pclass))
which(is.na(train$fare))
train <- read.csv("Data/train.csv", stringsAsFactors = FALSE)  # 891 obs
test <- read.csv("Data/test.csv", stringsAsFactors = FALSE)    # 418 obs
###
### Data structures
###
# Create a survived variable in the test data set
# Set "0" (did not survive) as the default value
test$survived <- 0
# Convert catagorical variables to factors
train$survived <- factor(train$survived)
train$sex <- factor(train$sex)
train$pclass <- factor(train$pclass)
train$embarked <- factor(train$embarked)
test$survived <- factor(test$survived)
test$sex <- factor(test$sex)
test$pclass <- factor(test$pclass)
test$embarked <- factor(test$embarked)
which(is.na(train$pclass))
which(is.na(train$fare))
is.na(train$fare)
head(train)
which(is.na(train$age))
which(is.na(train$fare))
which(is.na(test$fare))
train$fare[is.na(train$fare)]
is.na(train)
which(is.na(train))
str(train)
which(is.na(train))
which(is.na(train$age))
length(which(is.na(train)))
length(which(is.na(train$age)))
which(is.na(test$age))
which(is.na(test$fare))
which(is.na(test))
length(which(is.na(test)))
length(which(is.na(test$age)))
which(train$embarked == "")
which(test$embarked == "")
str(train)
# Model fare
fare.rf <- randomForest(fare ~ survived + pclass + sex, data = train,
ntree = 1000, importance = TRUE)
# Predict fare
test$fare[is.na(test$fare)] <- predict(fare.rf, test)
# Goal:         (1) Fix missing values
#               (2) Fix data structures
#               (3) Save new cleaned data sets
#
# Output:       (1) R datasets (maintains data structure)
#                   - test_clean.RData
#                   - train_clean.RData
#               (2) CSV datasets (archival)
#                   - train_clean.csv
#                   - test_clean.csv
#                   - full.csv
library(plyr)
# Load the data sets
train <- read.csv("Data/train.csv", stringsAsFactors = FALSE)  # 891 obs
test <- read.csv("Data/test.csv", stringsAsFactors = FALSE)    # 418 obs
###
### Data structures
###
# Create a survived variable in the test data set
# Set "0" (did not survive) as the default value
test$survived <- 0
# Convert catagorical variables to factors
train$survived <- factor(train$survived)
train$sex <- factor(train$sex)
train$pclass <- factor(train$pclass)
train$embarked <- factor(train$embarked)
test$survived <- factor(test$survived)
test$sex <- factor(test$sex)
test$pclass <- factor(test$pclass)
test$embarked <- factor(test$embarked)
fare.rf <- randomForest(fare ~ survived + pclass + sex, data = train,
ntree = 1000, importance = TRUE)
# Predict fare
test$fare[is.na(test$fare)] <- predict(fare.rf, test)
predict(fare.rf, test)
fare.rf <- randomForest(age ~ survived + pclass + sex + fare, data = train,
ntree = 1000, importance = TRUE)
# Predict age
train$age[is.na(train$age)] <- predict(age.mod, train)
train$age[is.na(train$age)] <- predict(age.rf, train)
age.rf <- randomForest(age ~ survived + pclass + sex + fare, data = train,
ntree = 1000, importance = TRUE)
# Predict age
train$age[is.na(train$age)] <- predict(age.rf, train)
train.age <- train[!is.na(train$age), ]
age.rf <- randomForest(age ~ survived + pclass + sex + fare, data = train.age,
ntree = 1000, importance = TRUE)
train$age[is.na(train$age)] <- predict(age.rf, train)
predict(age.rf, train)
test$age[is.na(test$age)] <- predict(age.rf, test)
str(train)
str(test)
# Goal: (1) Combine our three models into one prediction:
#             - randomForest
#             - SVM
#             - probit
# Source our models
source("2-randomForest.R")
source("3-SVM.R")
source("4-probit.R")
###
### Gather predictions
###
# randomForest
test$survived_rf <- predict(forest, test)
# SVM
test$survived_svm <- predict(svm.model, test, type = "response")
# Probit
test$survived_probit <- predict(probit, test, type = "response")
test$survived_probit[test$survived >= 0.5] <- 1
test$survived_probit[test$survived < 0.5] <- 0
# gbm
#test$survived_gbm <- predict(gbm, test, n.trees = 500)
#test$survived_gbm[test$survived_gbm >= 1] <- 1
#test$survived_gbm[test$survived_gbm < 1] <- 0
###
### Combine Predictions
###
combined <- as.numeric(test$survived_rf) +
as.numeric(test$survived_svm) +
as.numeric(test$survived_probit)
# 3 is 0
# 4 is 0
# 5 is 1
# 6 is 1
combined[combined <= 4] <- 0
combined[combined >= 5] <- 1
# Make our ensamble prediction
test$survived <- combined
write.csv(test, "Submissions/ensemble-05.csv")
# Goal: (1) Combine our three models into one prediction:
#             - randomForest
#             - SVM
#             - probit
# Source our models
source("2-randomForest.R")
source("3-SVM.R")
source("4-probit.R")
###
### Gather predictions
###
# randomForest
test$survived_rf <- predict(forest, test)
# SVM
test$survived_svm <- predict(svm.model, test, type = "response")
# Probit
test$survived_probit <- predict(probit, test, type = "response")
test$survived_probit[test$survived >= 0.5] <- 1
test$survived_probit[test$survived < 0.5] <- 0
# gbm
#test$survived_gbm <- predict(gbm, test, n.trees = 500)
#test$survived_gbm[test$survived_gbm >= 1] <- 1
#test$survived_gbm[test$survived_gbm < 1] <- 0
###
### Combine Predictions
###
combined <- as.numeric(test$survived_rf) +
as.numeric(test$survived_svm) +
as.numeric(test$survived_probit)
# 3 is 0
# 4 is 0
# 5 is 1
# 6 is 1
combined[combined <= 4] <- 0
combined[combined >= 5] <- 1
# Make our ensamble prediction
test$survived <- combined
write.csv(test, "Submissions/ensemble-05.csv")
# Goal: (1) Combine our three models into one prediction:
#             - randomForest
#             - SVM
#             - probit
# Source our models
source("2-randomForest.R")
source("3-SVM.R")
source("4-probit.R")
###
### Gather predictions
###
# randomForest
test$survived_rf <- predict(forest, test)
# SVM
test$survived_svm <- predict(svm.model, test, type = "response")
# Probit
test$survived_probit <- predict(probit, test, type = "response")
test$survived_probit[test$survived >= 0.5] <- 1
test$survived_probit[test$survived < 0.5] <- 0
# gbm
#test$survived_gbm <- predict(gbm, test, n.trees = 500)
#test$survived_gbm[test$survived_gbm >= 1] <- 1
#test$survived_gbm[test$survived_gbm < 1] <- 0
###
### Combine Predictions
###
combined <- as.numeric(test$survived_rf) +
as.numeric(test$survived_svm) +
as.numeric(test$survived_probit)
# 3 is 0
# 4 is 0
# 5 is 1
# 6 is 1
combined[combined <= 4] <- 0
combined[combined >= 5] <- 1
# Make our ensamble prediction
test$survived <- combined
write.csv(test, "Submissions/ensemble-05.csv")
# Goal: (1) Combine our three models into one prediction:
#             - randomForest
#             - SVM
#             - probit
# Source our models
source("2-randomForest.R")
source("3-SVM.R")
source("4-probit.R")
###
### Gather predictions
###
# randomForest
test$survived_rf <- predict(forest, test)
# SVM
test$survived_svm <- predict(svm.model, test, type = "response")
# Probit
test$survived_probit <- predict(probit, test, type = "response")
test$survived_probit[test$survived >= 0.5] <- 1
test$survived_probit[test$survived < 0.5] <- 0
# gbm
#test$survived_gbm <- predict(gbm, test, n.trees = 500)
#test$survived_gbm[test$survived_gbm >= 1] <- 1
#test$survived_gbm[test$survived_gbm < 1] <- 0
###
### Combine Predictions
###
combined <- as.numeric(test$survived_rf) +
as.numeric(test$survived_svm) +
as.numeric(test$survived_probit)
# 3 is 0
# 4 is 0
# 5 is 1
# 6 is 1
combined[combined <= 4] <- 0
combined[combined >= 5] <- 1
# Make our ensamble prediction
test$survived <- combined
write.csv(test, "Submissions/ensemble-05.csv")
