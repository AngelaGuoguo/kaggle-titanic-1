install.packages("ggplot2")
install.packages(ggplot2)
# Goal: (1) Construct basic randomForest models from the data
#       (2) Select the best model (Model selection)
#       (3) Save a prediction with our best randomForest
library(randomForest)
library(plyr)
# Load in the cleaned data sets
load("Data/train_clean.RData")  # 891 obs
load("Data/test_clean.RData")   # 418 obs
setwd("~/kaggle-titanic")
# Goal: (1) Construct basic randomForest models from the data
#       (2) Select the best model (Model selection)
#       (3) Save a prediction with our best randomForest
library(randomForest)
library(plyr)
# Load in the cleaned data sets
load("Data/train_clean.RData")  # 891 obs
load("Data/test_clean.RData")   # 418 obs
# Goal: (1) Construct basic randomForest models from the data
#       (2) Select the best model (Model selection)
#       (3) Save a prediction with our best randomForest
library(randomForest)
library(plyr)
# Load in the cleaned data sets
load("Data/train_clean.RData")  # 891 obs
load("Data/test_clean.RData")   # 418 obs
###
### Create randomForest object and make prediction
###
# Create forest without name, ticket, cabin, or embarked
forest <- randomForest(survived ~ pclass + sex + fare, data = train,
ntree = 15000, importance = TRUE)
summary(forest)
# Extract the importance of each variable
importance(forest)
###
### Model Selection and Improvement
###
# Check to see how many predictions our forest gets
# correct in the test data set. This gives us a rough
# estimate of how our model might perform
train$survived_pred <- predict(forest, train, type = "class")
which(train$survived_pred != train$survived)
# Calculate our % accuracy on the train data set
((length(which(train$survived_pred == train$survived))) /
length(train$survived)) * 100
###
### Saving our model and prediction as a new CSV
###
# Make a prediction with our randomForest
test$survived <- predict(forest, test)
# save csv file for submission
write.csv(test, "Submissions/randomForest.csv")
install.packages("randomForest")
# Goal: (1) Construct basic randomForest models from the data
#       (2) Select the best model (Model selection)
#       (3) Save a prediction with our best randomForest
library(randomForest)
library(plyr)
# Load in the cleaned data sets
load("Data/train_clean.RData")  # 891 obs
load("Data/test_clean.RData")   # 418 obs
###
### Create randomForest object and make prediction
###
# Create forest without name, ticket, cabin, or embarked
forest <- randomForest(survived ~ pclass + sex + fare, data = train,
ntree = 15000, importance = TRUE)
summary(forest)
# Extract the importance of each variable
importance(forest)
###
### Model Selection and Improvement
###
# Check to see how many predictions our forest gets
# correct in the test data set. This gives us a rough
# estimate of how our model might perform
train$survived_pred <- predict(forest, train, type = "class")
which(train$survived_pred != train$survived)
# Calculate our % accuracy on the train data set
((length(which(train$survived_pred == train$survived))) /
length(train$survived)) * 100
###
### Saving our model and prediction as a new CSV
###
# Make a prediction with our randomForest
test$survived <- predict(forest, test)
# save csv file for submission
write.csv(test, "Submissions/randomForest.csv")
# Load in the cleaned data sets
load("Data/train_clean.RData")  # 891 obs
load("Data/test_clean.RData")   # 418 obs
###
### Create randomForest object and make prediction
###
# Create random forest based on PCLASS, SEX, and FARE
#forest <- randomForest(survived ~ pclass + sex + fare, data = train,
#                         ntree = 15000, importance = TRUE)
forest <- randomForest(survived ~ pclass + sex + age +
sibsp + parch + embarked, data = train,
ntree = 15000, importance = TRUE)
summary(forest)
# Extract the importance of each variable
importance(forest)
###
### Model Selection and Improvement
###
# Check to see how many predictions our forest gets
# correct in the test data set. This gives us a rough
# estimate of how our model might perform
train$survived_pred <- predict(forest, train, type = "class")
which(train$survived_pred != train$survived)
# Calculate our % accuracy on the train data set
((length(which(train$survived_pred == train$survived))) /
length(train$survived)) * 100
# Make a prediction with our randomForest
test$survived <- predict(forest, test)
# save csv file for submission
write.csv(test, "Submissions/randomForest.csv")
# Load in the cleaned data sets
load("Data/train_clean.RData")  # 891 obs
load("Data/test_clean.RData")   # 418 obs
str(train$fare)
str(sex)
str(train$sex)
str(train_clean)
str(train$survived)
# Goal: construct baisc Support vector Machine model
library(kernlab)
# Load in the cleaned data sets
load("Data/train_clean.RData")  # 891 obs
load("Data/test_clean.RData")   # 418 obs
###
### Clean the data set before running SVC model
###
# Remove name, ticket, cabin
train <- train[ , -3] # remove name
train <- train[ , -7] # remove ticket
train <- train[ , -8] # remove cabin
# Create the SVM model with SEX, AGE, FARE
svm.model <- ksvm(survived ~ sex + age + fare, data = train)
# Check to see how many predictions our forest gets
# correct in the test data set. This gives us a rough
# estimate of how our model might perform
train$survived_pred <- predict(svm.model, train, type = "response")
which(train$survived_pred != train$survived)
# Calculate our % accuracy on the train data set
((length(which(train$survived_pred == train$survived))) /
length(train$survived)) * 100
install.packages("kernlab")
# Goal: construct baisc Support vector Machine model
library(kernlab)
# Load in the cleaned data sets
load("Data/train_clean.RData")  # 891 obs
load("Data/test_clean.RData")   # 418 obs
svm.model <- ksvm(survived ~ sex + age + fare, data = train)
train$survived_pred <- predict(svm.model, train, type = "response")
which(train$survived_pred != train$survived)
# Calculate our % accuracy on the train data set
((length(which(train$survived_pred == train$survived))) /
length(train$survived)) * 100
# Goal: construct baisc Support vector Machine model
library(kernlab)
# Load in the cleaned data sets
load("Data/train_clean.RData")  # 891 obs
load("Data/test_clean.RData")   # 418 obs
###
### Create SVM model
###
# Create the SVM model with SEX, AGE, FARE
svm.model <- ksvm(survived ~ sex + age + fare, data = train)
###
### Model Selection and Improvement
###
# Check to see how many predictions our forest gets
# correct in the test data set. This gives us a rough
# estimate of how our model might perform
train$survived_pred <- predict(svm.model, train, type = "response")
which(train$survived_pred != train$survived)
# Calculate our % accuracy on the train data set
((length(which(train$survived_pred == train$survived))) /
length(train$survived)) * 100
###
### Saving our model and prediction as a new CSV
###
# Make a prediction with our SVM model
test$survived <- predict(svm.model, test, type = "response")
# save csv file for submission
write.csv(test, "Submissions/svm-model-02.csv")
