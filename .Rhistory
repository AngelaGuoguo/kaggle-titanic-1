train_error(survived_pred)
cv_kfolds(model, k = 5)
>>>>>>> edfc287d85b997e9bdd06eaa15274611ec221279
# SVM
# Goal: (1) Combine our three models into one prediction:
#             - randomForest
#             - SVM
#             - probit
# Source our data and clean it
source("1-clean.R")
# Source our models
source("2-randomForest.R")
source("3-SVM.R")
source("4-neuralnet.R")
###
### Gather predictions
###
# randomForest
test$survived_rf <- predict(forest, test)
# SVM
test$survived_svm <- predict(svm.model, test, type = "response")
# Neural Net
test$survived_net <- test.net$survived
###
### Combine Predictions
###
vote <- as.numeric(test$survived_rf) +
as.numeric(test$survived_svm) +
as.numeric(test$survived_nnet)
# 0 is 0
# 4 is 0
# 5 is 1
# 6 is 1
combined <- vote
combined[combined <= 4] <- 0
combined[combined >= 5] <- 1
# Make our ensamble prediction
test$survived <- combined
write.csv(test, "Submissions/ensemble-12.csv")
# Compare to highest
highest <- read.csv("Submissions/highest.csv")
which(test$survived != highest$survived)
install.packages("neuralnet")
# Goal: (1) Combine our three models into one prediction:
#             - randomForest
#             - SVM
#             - probit
# Source our data and clean it
source("1-clean.R")
# Source our models
source("2-randomForest.R")
source("3-SVM.R")
source("4-neuralnet.R")
###
### Gather predictions
###
# randomForest
test$survived_rf <- predict(forest, test)
# SVM
test$survived_svm <- predict(svm.model, test, type = "response")
# Neural Net
test$survived_net <- test.net$survived
###
### Combine Predictions
###
vote <- as.numeric(test$survived_rf) +
as.numeric(test$survived_svm) +
as.numeric(test$survived_nnet)
# 0 is 0
# 4 is 0
# 5 is 1
# 6 is 1
combined <- vote
combined[combined <= 4] <- 0
combined[combined >= 5] <- 1
# Make our ensamble prediction
test$survived <- combined
write.csv(test, "Submissions/ensemble-12.csv")
# Compare to highest
highest <- read.csv("Submissions/highest.csv")
which(test$survived != highest$survived)
predict(net3, test, type = "class")
net3 <- nnet(survived ~ sex + pclass + fare + age, data = train, size = 2,
linout = FALSE, maxit = 10000)
# Goal: (1) Combine our three models into one prediction:
#             - randomForest
#             - SVM
#             - probit
# Source our data and clean it
source("1-clean.R")
# Source our models
source("2-randomForest.R")
source("3-SVM.R")
source("4-neuralnet.R")
###
### Gather predictions
###
# randomForest
test$survived_rf <- predict(forest, test)
# SVM
test$survived_svm <- predict(svm.model, test, type = "response")
# Neural Net
test$survived_net <- predict(net3, test, type = "class")
###
### Combine Predictions
###
vote <- as.numeric(test$survived_rf) +
as.numeric(test$survived_svm) +
as.numeric(test$survived_nnet)
# 0 is 0
# 4 is 0
# 5 is 1
# 6 is 1
combined <- vote
combined[combined <= 4] <- 0
combined[combined >= 5] <- 1
# Make our ensamble prediction
test$survived <- combined
write.csv(test, "Submissions/ensemble-12.csv")
# Compare to highest
highest <- read.csv("Submissions/highest.csv")
which(test$survived != highest$survived)
vote
install.packages('carat')
install.packages('caret')
# Goal: (1) Combine our three models into one prediction:
#             - randomForest
#             - SVM
#             - probit
# Source our data and clean it
source("1-clean.R")
# Source our models
source("2-randomForest.R")
source("3-SVM.R")
source("4-neuralnet.R")
###
### Gather predictions
###
# randomForest
test$survived_rf <- predict(forest, test)
# SVM
test$survived_svm <- predict(svm.model, test, type = "response")
# Neural Net
test$survived_net <- predict(net3, test, type = "class")
###
### Combine Predictions
###
vote <- as.numeric(test$survived_rf) +
as.numeric(test$survived_svm) +
as.numeric(test$survived_nnet)
# 0 is 0
# 4 is 0
# 5 is 1
# 6 is 1
combined <- vote
combined[combined <= 4] <- 0
combined[combined >= 5] <- 1
# Make our ensamble prediction
test$survived <- combined
write.csv(test, "Submissions/ensemble-12.csv")
# Compare to highest
highest <- read.csv("Submissions/highest.csv")
which(test$survived != highest$survived)
# Goal:     (1) Construct basic randomForest models from the data
#           (2) Select the best model (Model selection)
#           (3) Save a prediction with our best randomForest
library(neuralnet)
library(plyr)
library(nnet)
library(caret)
# Load in the cleaned data sets
load("Data/train_clean.RData")  # 891 obs
load("Data/test_clean.RData")   # 418 obs
###
### Create neural network model
###
## Make vectors because neuralnet is weird
sex <- train$sex
pclass <- train$pclass
fare <- train$fare
age <- train$age
survived <- train$survived
vectors <- cbind(sex, pclass, fare, age, survived)
vectors <- as.data.frame(vectors)
vectors$sex <- factor(vectors$sex)
vectors$pclass <- factor(vectors$pclass)
vectors$survived <- factor(vectors$survived)
sex.test <- test$sex
pclass.test <- test$pclass
fare.test <- test$fare
age.test <- test$age
survived.test <- test$survived
vectors.test <- cbind(sex.test, pclass.test, fare.test, age.test)
vectors.test <- as.data.frame(vectors.test)
colnames(vectors.test) <- c("sex", "pclass", "fare", "age")
vectors.test$sex.test <- factor(vectors.test$sex)
vectors.test$pclass.test <- factor(vectors.test$pclass)
vectors.test$survived.test <- factor(vectors.test$survived)
# Create neural network based on PCLASS, SEX, and FARE
#net <- neuralnet(survived ~ sex + pclass + fare + age, data = vectors,
#                 hidden = 2, err.fct="ce")
#net2 <- neuralnet(survived ~ sex + pclass + fare + age, data = vectors,
#                 hidden = 7, err.fct="ce", linear.output = FALSE)
net3 <- nnet(survived ~ sex + pclass + fare + age, data = train, size = 2,
linout = FALSE, maxit = 10000)
result <- compute(net, vectors.test)
source("4-neuralnet.R")
# Goal:     (1) Construct basic randomForest models from the data
#           (2) Select the best model (Model selection)
#           (3) Save a prediction with our best randomForest
library(neuralnet)
library(plyr)
library(nnet)
library(caret)
# Load in the cleaned data sets
load("Data/train_clean.RData")  # 891 obs
load("Data/test_clean.RData")   # 418 obs
###
### Create neural network model
###
## Make vectors because neuralnet is weird
sex <- train$sex
pclass <- train$pclass
fare <- train$fare
age <- train$age
survived <- train$survived
vectors <- cbind(sex, pclass, fare, age, survived)
vectors <- as.data.frame(vectors)
vectors$sex <- factor(vectors$sex)
vectors$pclass <- factor(vectors$pclass)
vectors$survived <- factor(vectors$survived)
sex.test <- test$sex
pclass.test <- test$pclass
fare.test <- test$fare
age.test <- test$age
survived.test <- test$survived
vectors.test <- cbind(sex.test, pclass.test, fare.test, age.test)
vectors.test <- as.data.frame(vectors.test)
colnames(vectors.test) <- c("sex", "pclass", "fare", "age")
vectors.test$sex.test <- factor(vectors.test$sex)
vectors.test$pclass.test <- factor(vectors.test$pclass)
vectors.test$survived.test <- factor(vectors.test$survived)
# Create neural network based on PCLASS, SEX, and FARE
#net <- neuralnet(survived ~ sex + pclass + fare + age, data = vectors,
#                 hidden = 2, err.fct="ce")
#net2 <- neuralnet(survived ~ sex + pclass + fare + age, data = vectors,
#                 hidden = 7, err.fct="ce", linear.output = FALSE)
net3 <- nnet(survived ~ sex + pclass + fare + age, data = train, size = 2,
linout = FALSE, maxit = 10000)
#net4 <- nnet(survived ~ sex.name + pclass + fare + age, data = train, size = 2,
#             linout = FALSE, maxit = 10000)
## Get the result
#result <- compute(net, vectors.test)
#result2 <- compute(net2, vectors.test)
result3 <- predict(net3, test, type = "class")
#result4 <- predict(net4, test, type = "class")
## Since neuralnet is being a bitch, we round values
#result$net.result[which(result$net.result < 1.5)] <- 1
#result$net.result[which(result$net.result >= 1.5)] <- 2
#test$survived <- result$net.result
#test$survived[which(test$survived == 1)] <- 0
#test$survived[which(test$survived == 2)] <- 1
## Use result 3
test.net <- test
test.net$survived <- result3
## Use result 4
#test.net4 <- test
#test.net4$survived <- result4
###
### Saving our model and prediction as a new CSV
###
# save csv file for submission
write.csv(test, "Submissions/neuralnet-01.csv")
write.csv(test.net, "Submissions/neuralnet-02.csv")
write.csv(test.net4, "Submissions/neuralnet-03.csv")
source("4-neuralnet.R")
survived.test <- test$survived
source("4-neuralnet.R")
test$survived
survived.test
source("4-neuralnet.R")
# Goal:     (1) Construct basic randomForest models from the data
#           (2) Select the best model (Model selection)
#           (3) Save a prediction with our best randomForest
library(neuralnet)
library(plyr)
library(nnet)
library(caret)
# Load in the cleaned data sets
load("Data/train_clean.RData")  # 891 obs
load("Data/test_clean.RData")   # 418 obs
###
### Create neural network model
###
## Make vectors because neuralnet is weird
sex <- train$sex
pclass <- train$pclass
fare <- train$fare
age <- train$age
survived <- train$survived
vectors <- cbind(sex, pclass, fare, age, survived)
vectors <- as.data.frame(vectors)
vectors$sex <- factor(vectors$sex)
vectors$pclass <- factor(vectors$pclass)
vectors$survived <- factor(vectors$survived)
sex.test <- test$sex
pclass.test <- test$pclass
fare.test <- test$fare
age.test <- test$age
#survived.test <- test$survived
vectors.test <- cbind(sex.test, pclass.test, fare.test, age.test)
vectors.test <- as.data.frame(vectors.test)
colnames(vectors.test) <- c("sex", "pclass", "fare", "age")
vectors.test$sex.test <- factor(vectors.test$sex)
vectors.test$pclass.test <- factor(vectors.test$pclass)
#vectors.test$survived.test <- factor(vectors.test$survived)
# Create neural network based on PCLASS, SEX, and FARE
#net <- neuralnet(survived ~ sex + pclass + fare + age, data = vectors,
#                 hidden = 2, err.fct="ce")
#net2 <- neuralnet(survived ~ sex + pclass + fare + age, data = vectors,
#                 hidden = 7, err.fct="ce", linear.output = FALSE)
net3 <- nnet(survived ~ sex + pclass + fare + age, data = train, size = 2,
linout = FALSE, maxit = 10000)
#net4 <- nnet(survived ~ sex.name + pclass + fare + age, data = train, size = 2,
#             linout = FALSE, maxit = 10000)
## Get the result
#result <- compute(net, vectors.test)
#result2 <- compute(net2, vectors.test)
result3 <- predict(net3, test, type = "class")
#result4 <- predict(net4, test, type = "class")
## Since neuralnet is being a bitch, we round values
#result$net.result[which(result$net.result < 1.5)] <- 1
#result$net.result[which(result$net.result >= 1.5)] <- 2
#test$survived <- result$net.result
#test$survived[which(test$survived == 1)] <- 0
#test$survived[which(test$survived == 2)] <- 1
## Use result 3
test.net <- test
test.net$survived <- result3
## Use result 4
#test.net4 <- test
#test.net4$survived <- result4
###
### Saving our model and prediction as a new CSV
###
# save csv file for submission
write.csv(test, "Submissions/neuralnet-01.csv")
write.csv(test.net, "Submissions/neuralnet-02.csv")
write.csv(test.net4, "Submissions/neuralnet-03.csv")
# Goal:     (1) Construct basic randomForest models from the data
#           (2) Select the best model (Model selection)
#           (3) Save a prediction with our best randomForest
library(neuralnet)
library(plyr)
library(nnet)
library(caret)
# Load in the cleaned data sets
load("Data/train_clean.RData")  # 891 obs
load("Data/test_clean.RData")   # 418 obs
###
### Create neural network model
###
## Make vectors because neuralnet is weird
sex <- train$sex
pclass <- train$pclass
fare <- train$fare
age <- train$age
survived <- train$survived
vectors <- cbind(sex, pclass, fare, age, survived)
vectors <- as.data.frame(vectors)
vectors$sex <- factor(vectors$sex)
vectors$pclass <- factor(vectors$pclass)
vectors$survived <- factor(vectors$survived)
sex.test <- test$sex
pclass.test <- test$pclass
fare.test <- test$fare
age.test <- test$age
#survived.test <- test$survived
vectors.test <- cbind(sex.test, pclass.test, fare.test, age.test)
vectors.test <- as.data.frame(vectors.test)
colnames(vectors.test) <- c("sex", "pclass", "fare", "age")
vectors.test$sex.test <- factor(vectors.test$sex)
vectors.test$pclass.test <- factor(vectors.test$pclass)
#vectors.test$survived.test <- factor(vectors.test$survived)
# Create neural network based on PCLASS, SEX, and FARE
#net <- neuralnet(survived ~ sex + pclass + fare + age, data = vectors,
#                 hidden = 2, err.fct="ce")
#net2 <- neuralnet(survived ~ sex + pclass + fare + age, data = vectors,
#                 hidden = 7, err.fct="ce", linear.output = FALSE)
net3 <- nnet(survived ~ sex + pclass + fare + age, data = train, size = 2,
linout = FALSE, maxit = 10000)
#net4 <- nnet(survived ~ sex.name + pclass + fare + age, data = train, size = 2,
#             linout = FALSE, maxit = 10000)
## Get the result
#result <- compute(net, vectors.test)
#result2 <- compute(net2, vectors.test)
result3 <- predict(net3, test, type = "class")
#result4 <- predict(net4, test, type = "class")
## Since neuralnet is being a bitch, we round values
#result$net.result[which(result$net.result < 1.5)] <- 1
#result$net.result[which(result$net.result >= 1.5)] <- 2
#test$survived <- result$net.result
#test$survived[which(test$survived == 1)] <- 0
#test$survived[which(test$survived == 2)] <- 1
## Use result 3
test.net <- test
test.net$survived <- result3
## Use result 4
#test.net4 <- test
#test.net4$survived <- result4
###
### Saving our model and prediction as a new CSV
###
# save csv file for submission
write.csv(test, "Submissions/neuralnet-01.csv")
write.csv(test.net, "Submissions/neuralnet-02.csv")
#write.csv(test.net4, "Submissions/neuralnet-03.csv")
source("4-neuralnet.R")
# Goal: (1) Combine our three models into one prediction:
#             - randomForest
#             - SVM
#             - probit
# Source our data and clean it
source("1-clean.R")
# Source our models
source("2-randomForest.R")
source("3-SVM.R")
source("4-neuralnet.R")
###
### Gather predictions
###
# randomForest
test$survived_rf <- predict(forest, test)
# SVM
test$survived_svm <- predict(svm.model, test, type = "response")
# Neural Net
test$survived_net <- predict(net3, test, type = "class")
###
### Combine Predictions
###
vote <- as.numeric(test$survived_rf) +
as.numeric(test$survived_svm) +
as.numeric(test$survived_nnet)
# 0 is 0
# 4 is 0
# 5 is 1
# 6 is 1
combined <- vote
combined[combined <= 4] <- 0
combined[combined >= 5] <- 1
# Make our ensamble prediction
test$survived <- combined
write.csv(test, "Submissions/ensemble-12.csv")
# Compare to highest
highest <- read.csv("Submissions/highest.csv")
which(test$survived != highest$survived)
vote
predict(net3, test, type = "class")
test$survived_net <- predict(net3, test, type = "class")
predict(svm.model, test, type = "response")
test$survived_nnet <- predict(net3, test, type = "class")
vote <- as.numeric(test$survived_rf) +
as.numeric(test$survived_svm) +
as.numeric(test$survived_nnet)
vote
as.numeric(test$survived_nnet)
as.numeric(test$survived_svm)
predict(net3, test, type = "class")
as.factor(predict(net3, test, type = "class"))
test$survived_nnet <- as.factor(predict(net3, test, type = "class"))
vote <- as.numeric(test$survived_rf) +
as.numeric(test$survived_svm) +
as.numeric(test$survived_nnet)
vote
# Goal: (1) Combine our three models into one prediction:
#             - randomForest
#             - SVM
#             - probit
# Source our data and clean it
source("1-clean.R")
# Source our models
source("2-randomForest.R")
source("3-SVM.R")
source("4-neuralnet.R")
###
### Gather predictions
###
# randomForest
test$survived_rf <- predict(forest, test)
# SVM
test$survived_svm <- predict(svm.model, test, type = "response")
# Neural Net
test$survived_nnet <- as.factor(predict(net3, test, type = "class"))
###
### Combine Predictions
###
vote <- as.numeric(test$survived_rf) +
as.numeric(test$survived_svm) +
as.numeric(test$survived_nnet)
# 0 is 0
# 4 is 0
# 5 is 1
# 6 is 1
combined <- vote
combined[combined <= 4] <- 0
combined[combined >= 5] <- 1
# Make our ensamble prediction
test$survived <- combined
write.csv(test, "Submissions/ensemble-12.csv")
# Compare to highest
highest <- read.csv("Submissions/highest.csv")
which(test$survived != highest$survived)
