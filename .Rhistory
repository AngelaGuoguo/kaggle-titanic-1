matrix(0.2, -.26, .23, .22, nrow = 2, byrow = T)
?matrix
matrix(0, 0, 0, .16, nrow = 2, byrow = T)
matrix(c(0, 0, 0, .16), nrow = 2, byrow = T)
library(ggplot2)
z <- c(0, 0)
g <- ggplot()
for (i in 1:100000) {
r <- runif(1)
if (r < .01) {
z <- matrix(c(0, 0, 0, .16), nrow = 2, byrow = T) * z
}
else if (r < .86) {
z <- matrix(c(.85, .04, -.04, .85), nrow = 2, byrow = T) * z
}
else if (r < .93) {
z <- matrix(c(0.2, -.26, .23, .22), nrow = 2, byrow = T) * z + c(0, 1.6)
}
else {
z <- matrix(c(-.15, .28, .26, .24), nrow = 2, byrow = T) * z + c(0, .44)
}
g <- g + geom_point(aes(x = z[1], y = z[2]))
}
g
z
z <- matrix(c(0, 0), nrow = 2)
g <- ggplot()
for (i in 1:100000) {
r <- runif(1)
if (r < .01) {
z <- matrix(c(0, 0, 0, .16), nrow = 2, byrow = T) * z
}
else if (r < .86) {
z <- matrix(c(.85, .04, -.04, .85), nrow = 2, byrow = T) * z
}
else if (r < .93) {
z <- matrix(c(0.2, -.26, .23, .22), nrow = 2, byrow = T) * z + c(0, 1.6)
}
else {
z <- matrix(c(-.15, .28, .26, .24), nrow = 2, byrow = T) * z + c(0, .44)
}
g <- g + geom_point(aes(x = z[1], y = z[2]))
}
z
matrix(c(1, 2, 3, 4)) * z
matrix(c(1, 2, 3, 4))
matrix(c(1, 2, 3, 4), nrow = 2)
matrix(c(1, 2, 3, 4), nrow = 2) * z
matrix(c(1, 2, 3, 4), nrow = 2) * matrix(c(0, 0), nrow = 1)
matrix(c(1, 2, 3, 4), nrow = 2) * matrix(c(0, 0), nrow = 2)
library(ggplot2)
z <- matrix(c(0, 0), nrow = 2)
g <- ggplot()
for (i in 1:100000) {
r <- runif(1)
if (r < .01) {
z <- matrix(c(0, 0, 0, .16), nrow = 2, byrow = T) %*% z
}
else if (r < .86) {
z <- matrix(c(.85, .04, -.04, .85), nrow = 2, byrow = T) %*% z
}
else if (r < .93) {
z <- matrix(c(0.2, -.26, .23, .22), nrow = 2, byrow = T) %*% z + c(0, 1.6)
}
else {
z <- matrix(c(-.15, .28, .26, .24), nrow = 2, byrow = T) %*% z + c(0, .44)
}
g <- g + geom_point(aes(x = z[1], y = z[2]))
}
g
z
g + geom_point(aes(x = z[1], y = z[2]))
?ar
setwd("C:/Users/Public/Documents/owlengine")
data <- read.csv("ardata.csv")
library(quantmod)
install.packages("fARMA")
install.packages("fArma")
library(quantmod)
library(fArma)
getSymbols("AAPL")
getSymbols("GOOG")
getSymbols("NOK")
getSymbols("MSFT")
?diff
aaplRets = diff(log(Cl(AAPL)))
googRets = diff(log(Cl(GOOG)))
msftRets = diff(log(Cl(MSFT)))
nokRets = diff(log(Cl(NOK)))
aaplRets <- as.ts(aaplRets)
googRets <- as.ts(googRets)
msftRets <- as.ts(msftRets)
nokRets <- as.ts(nokRets)
?ar
ar(aaplRets)
ar(aaplRets, na.action = na.omit)
aaplAR <- ar(aaplRets, na.action = na.omit)
?predict
summary(aaplAR)
names(aaplAR)
aaplAR$aic
predict(aaplAR, n.ahead = 1, se.fit = TRUE, doplot = T)
predict(aaplAR, n.ahead = 1, se.fit = TRUE)
predict(aaplAR, n.ahead = 2)
fix(aaplAR)
predict.ar(aaplAR, n.ahead = 2)
predict(aaplAR)
str(aaplAR)
aaplAR
plot(aaplAR)
ts.plot(aaplAR)
ts.plot(aaplAR, predict(aaplAR, n.ahead = 10)$pred)
predict("aaplAR", n.ahead= 12)
x <- predict(aaplAR, n.ahead = 12)
as.numeric( predict( aaplAR, n.ahead=1, doplot=F )$pred )
predict(aaplAR)
predict(aaplAR, n.ahead = 100)
x <- aaplAR
predict(x)
fix(googRets)
predict(aaplAR, n.ahead = 12)
?Cl
diff(log(Cl(AAPL)))
diff(log(Cl(AAPL)["/2012-05-29"]))
library(lubridate)
x <- data.frame()
colnames <- c("Date", seq(from=as.Date("2005-06-01"), to=as.Date("2005-06-30"), by=1))
rstudio::viewData(x)
rstudio::viewData(x)
colnames(x) <- c("Date", seq(from=as.Date("2005-06-01"), to=as.Date("2005-06-30"), by=1))
?data.frame
x <- matrix()
colnames(x) <- c("Date", seq(from=as.Date("2005-06-01"), to=as.Date("2005-06-30"), by=1))
x <- matrix(nrow = length(seq(from=as.Date("2005-06-01"), to=as.Date("2005-06-30"), by=1)))
x <- matrix(nrow = length(seq(from=as.Date("2013-01-17"), to=as.Date("2013-03-23"), by=1)))
x <- matrix(nrow = length(seq(from=as.Date("2013-01-17"), to=as.Date("2013-03-23"), by=1)),
ncol = length(seq(from=as.Date("2005-06-01"), to=as.Date("2005-06-30"), by=1)+ 1))
x <- matrix(nrow = length(seq(from=as.Date("2013-01-17"), to=as.Date("2013-03-23"), by=1)),
ncol = length(seq(from=as.Date("2013-01-17"), to=as.Date("2013-03-23"), by=1)+ 1))
x <- matrix(nrow = length(seq(from=as.Date("2013-01-17"), to=as.Date("2013-03-23"), by=1)),
ncol = (length(seq(from=as.Date("2013-01-17"), to=as.Date("2013-03-23"), by=1)+ 1)))
x <- matrix(nrow = length(seq(from=as.Date("2013-01-17"), to=as.Date("2013-03-23"), by=1)),
ncol = (length(seq(from=as.Date("2013-01-17"), to=as.Date("2013-03-23"), by=1)))+ 1)
colnames(x) <- c("Date", seq(from=as.Date("2005-06-01"), to=as.Date("2005-06-30"), by=1))
colnames(x) <- c("Date", as.character(seq(from=as.Date("2005-06-01"), to=as.Date("2005-06-30"), by=1))
)
colnames(x) <- c("Date", as.character(seq(from=as.Date("2013-01-17"), to=as.Date("2013-03-23")))
)
colnames(x) <- c("Date", as.character(seq(from=as.Date("2013-01-17"), to=as.Date("2013-03-23"), by = 1)))
rstudio::viewData(x)
x <- matrix(nrow = length(seq(from=as.Date("2013-01-17"), to=as.Date("2013-03-16"), by=1)),
ncol = (length(seq(from=as.Date("2013-01-17"), to=as.Date("2013-03-16"), by=1)))+ 1)
colnames(x) <- c("Date", as.character(seq(from=as.Date("2013-01-17"), to=as.Date("2013-03-16"), by = 1)))
x <- matrix(nrow = length(seq(from=as.Date("2013-01-17"), to=as.Date("2013-03-16"), by=1)),
ncol = (length(seq(from=as.Date("2013-01-17"), to=as.Date("2013-03-23"), by=1))))
colnames(x) <- c("Date", as.character(seq(from=as.Date("2013-01-17"), to=as.Date("2013-03-16"), by = 1)))
x <- matrix(nrow = length(seq(from=as.Date("2013-01-17"), to=as.Date("2013-03-23"), by=1)),
ncol = (length(seq(from=as.Date("2013-01-17"), to=as.Date("2013-03-16"), by=1)))+ 1)
colnames(x) <- c("Date", as.character(seq(from=as.Date("2013-01-17"), to=as.Date("2013-03-16"), by = 1)))
x[, 1] <- seq(from=as.Date("2013-01-17"), to=as.Date("2013-03-23"), by=1)
rstudio::viewData(x)
x[, 1] <- as.character(seq(from=as.Date("2013-01-17"), to=as.Date("2013-03-23"), by=1))
rstudio::viewData(x)
x <- matrix(nrow = length(seq(from=as.Date("2013-01-17"), to=as.Date("2013-03-23"), by=1)),
ncol = (length(seq(from=as.Date("2013-01-16"), to=as.Date("2013-03-16"), by=1)))+ 1)
colnames(x) <- c("Date", as.character(seq(from=as.Date("2013-01-16"), to=as.Date("2013-03-16"), by = 1)))
x[, 1] <- as.character(seq(from=as.Date("2013-01-17"), to=as.Date("2013-03-23"), by=1))
rstudio::viewData(x)
setwd("C:/Ruby193/_site/kaggle-titanic")
library(gbm)
library(plyr)
load("Data/train_clean.RData")  # 891 obs
load("Data/test_clean.RData")   # 418 obs
library(gbm)
library(plyr)
library(ada)
library(caret)
install.packages("ada")
library(ada)
?ada
rstudio::viewData(train)
boosted <- ada(survived ~ sex + pclass + age + fare, data = train)
predict(test)
predict(boosted, test)
model <- "ada(survived ~ sex + pclass + age + fare, data = train)"
train$survived_pred <- predict(boosted, train)
test$survived <- predict(boosted, test)
write.csv(test, "Submissions/bdt-01.csv")
length(which(train$survived_pred != train$survived))
###
### CV
###
source("5-model_testing.R")
train_error(survived_pred)
cv_kfolds(model, k = 9)
warnings()
train_error(train$survived_pred)
train_error(survived_pred)
cv_kfolds(model, k = 9)
names(ada)
names(boosted)
boosted$model
names(boosted)
boosted$terms
names(boosted)
boosted$confusion
?rfe
rfe(train[,2:], train$survived)
rfe(train[,2:13], train$survived)
train[2:13]
rfe(x = train, y = train$survived)
train.bitch <- train[,2:13]
rfe(train.bitch, train$survived)
rfe(x = train.bitch, y = train$survived)
varImp(boosted)
?ada
?gbm
x <- gbm(survived ~ sex + pclass + age + fare, data = train)
library(C50)
install.packages(C50)
install.packages("C50")
library(C50)
crtree <- C50(survived ~ sex + pclass + age + fare, data = train)
library(C50)
crtree <- C5.0(survived ~ sex + pclass + age + fare, data = train)
names(crtree)
crtree$boostResults
?C5.0
?C5.0Tree
crtree <- C5.0(survived ~ sex + pclass + age + fare, data = train)
train$survived_pred <- predict(boosted, train)
train$survived_pred2 <- predict(crtree, train)
test$survived <- predict(boosted, test)
test2 <- test
test2$survived <- predict(crtree, test)
write.csv(test, "Submissions/bdt-01.csv")
write.csv(test2, "Submissions/bdt-02.csv")
length(which(train$survived_pred2 != train$survived))
boosted2 <- ada(survived ~ sex.name + pclass + age + fare, data = train)
train$survived_pred <- predict(boosted, train)
train$survived_pred2 <- predict(crtree, train)
train$survived_pred3 <- predict(boosted2, train)
# Make our prediction on the TEST data set
test$survived <- predict(boosted, test)
test2 <- test
test2$survived <- predict(crtree, test)
test3 <- test
test3$survived <- predict(boosted2, test)
# save csv file for submission
write.csv(test, "Submissions/bdt-01.csv")
write.csv(test2, "Submissions/bdt-02.csv")
write.csv(test3, "Submissions/bdt-03.csv")
length(which(train$survived_pred3 != train$survived))
?ada
rstudio::viewData(train)
load("Data/train_clean.RData")  # 891 obs
load("Data/test_clean.RData")   # 418 obs
rstudio::viewData(train)
boosted <- ada(survived ~ sex + pclass + age + fare, data = train)
boosted2 <- ada(survived ~ sex.name + pclass + age + fare + family, data = train)
## Create C50 model
crtree <- C5.0(survived ~ sex + pclass + age + fare, data = train)
# Save our model as a string
model <- "ada(survived ~ sex + pclass + age + fare, data = train)"
###
### Saving our model and prediction as a new CSV
###
# Make our prediction on the TRAIN data set [For calculating error]
train$survived_pred <- predict(boosted, train)
train$survived_pred2 <- predict(crtree, train)
train$survived_pred3 <- predict(boosted2, train)
# Make our prediction on the TEST data set
test$survived <- predict(boosted, test)
test2 <- test
test2$survived <- predict(crtree, test)
test3 <- test
test3$survived <- predict(boosted2, test)
# save csv file for submission
write.csv(test, "Submissions/bdt-01.csv")
write.csv(test2, "Submissions/bdt-02.csv")
write.csv(test3, "Submissions/bdt-03.csv")
length(which(train$survived_pred3 != train$survived))
which(train$survived_pred2 != train$survived_pred3)
which(train$survived_pred != train$survived_pred3)
boosted2 <- ada(survived ~ sex.name + pclass + age + fare + family,
data = train, iter = 500)
train$survived_pred3 <- predict(boosted2, train)
test3$survived <- predict(boosted2, test)
write.csv(test3, "Submissions/bdt-03.csv")
length(which(train$survived_pred3 != train$survived))
boosted2 <- ada(survived ~ sex.name + pclass + age + fare + family,
data = train, iter = 10000)
train$survived_pred3 <- predict(boosted2, train)
length(which(train$survived_pred3 != train$survived))
test3$survived <- predict(boosted2, test)
write.csv(test3, "Submissions/bdt-03.csv")
length(which(train$survived_pred3 != train$survived))
plot.ada(boosted2)
boosted2 <- ada(survived ~ sex.name + pclass + age + fare + family,
data = train, max.iter = 250, verbose = T)
names(boosted2)
boosted2$confusion
boosted2$iter
boosted2 <- ada(survived ~ sex.name + pclass + age + fare + family,
data = train, max.iter = 250, verbose = TRUE)
boosted2 <- ada(survived ~ sex.name + pclass + age + fare + family,
data = train, max.iter = 20, verbose = TRUE)
boosted2$confusion
train$survived_pred <- predict(boosted, train)
train$survived_pred2 <- predict(crtree, train)
train$survived_pred3 <- predict(boosted2, train)
# Make our prediction on the TEST data set
test$survived <- predict(boosted, test)
test2 <- test
test2$survived <- predict(crtree, test)
test3 <- test
test3$survived <- predict(boosted2, test)
# save csv file for submission
write.csv(test, "Submissions/bdt-01.csv")
write.csv(test2, "Submissions/bdt-02.csv")
write.csv(test3, "Submissions/bdt-03.csv")
length(which(train$survived_pred3 != train$survived))
###
### CV
###
source("5-model_testing.R")
train_error(survived_pred)
cv_kfolds(model, k = 9)
?plot.ada
plot(boosted2)
qplot(boosted2)
library(ggplot2)
qplot(boosted2)
plot(boosted2)
boosted2 <- ada(survived ~ sex.name + pclass + age + fare + family +
fare.distance,
data = train, max.iter = 20, verbose = TRUE)
boosted3 <- ada(survived ~ sex.name + pclass + age + fare + family +
fare.distance,
data = train, max.iter = 20, verbose = TRUE)
boosted2 <- ada(survived ~ sex.name + pclass + age + fare + family,
data = train, max.iter = 20, verbose = TRUE)
boosted3$confusion
boosted2$confusion
rstudio::viewData(train)
boosted3 <- ada(survived ~ sex.name + pclass + age + fare + family +
fare.distance + embarked,
data = train, max.iter = 20, verbose = TRUE)
boosted3$confusion
model <- "ada(survived ~ sex.name + pclass + age + fare + family +
fare.distance + embarked,
data = train, max.iter = 20, verbose = TRUE)"
cv_kfolds(model, k = 9)
plot(boosted3)
nums <- c(1:1e6-1)
nums <- c(1:(1e6-1))
nums
collatz <- function(x) {
if (x %% 2 == 0) {
1 + collatz(x/2)
}
else {
1 + collatz(3 * x + 1)
}
}
nums <- c(1:(1e6-1))
steps <- sapply(nums, collatz)
collatz(1)
collatz(2)
collatz <- function(x) {
if (x == 1) {
break
}
else if (x %% 2 == 0) {
1 + collatz(x/2)
}
else if (x %% 2 == 1)
1 + collatz(3 * x + 1)
}
}
collatz <- function(x) {
if (x == 1) {
break
}
else if (x %% 2 == 0) {
1 + collatz(x/2)
}
else if (x %% 2 == 1) {
1 + collatz(3 * x + 1)
}
}
nums <- c(1:(1e6-1))
steps <- sapply(nums, collatz)
collatz(1)
collatz(2)
collatz <- function(x) {
if (x == 1) {
break
}
else if (x %% 2 == 0) {
x <- x/2
1 + collatz(x)
}
else if (x %% 2 == 1) {
x <- 3 * x + 1
1 + collatz(x)
}
}
collatz(1)
collatz(2)
a = 1
length(a) = 1e6
a
collatz <- function(x) {
ans <- 0
if (x == 1) {
ans
}
else if (x %% 2 == 0) {
x <- x/2
ans <- ans + 1 + collatz(x)
}
else if (x %% 2 == 1) {
x <- 3 * x + 1
ans <- ans + 1 + collatz(x)
}
}
collatz(0)
collatz <- function(x) {
steps <- 0
if (x == 1) {
steps
}
else if (x %% 2 == 0) {
collatz(x / 2)
steps <- steps + 1
}
else if (x %% 2 == 1) {
collatz(3 * x + 1)
steps <- steps + 1
}
}
collatz(1)
collatz(2)
collatz(2)
collatz(3)
collatz(4)
collatz <- function(x) {
steps <- 0
if (x == 1) {
steps
}
else if (x %% 2 == 0) {
x <- x/2
collatz(x)
steps <- steps + 1
}
else if (x %% 2 == 1) {
x <- 3 * x + 1
collatz(x)
steps <- steps + 1
}
}
collatz(0)
collatz(1)
collatz(2)
collatz(3)
collatz(40)
str(collatz)
collatz <- function(x) {
while(x != 1) {
if(x %% 2) {
1 + collatz(x / 2)
}
else {
1 + collatz(3 * x + 1)
}
}
}
collatz(1)
collatz()
collatz(2)
collatz(3)
collatz(4)
collatz <- function(x) {
steps <- 0
while(x != 1) {
if(x %% 2) {
steps <- steps + 1 + collatz(x / 2)
}
else {
steps <- steps + 1 + collatz(3 * x + 1)
}
}
steps
}
collatz(1)
collatz(2)
setwd("~/School/Stat 405 - Stat Computing and Graphics/Project 2")
gtd <- read.csv("gtd.csv", stringsAsFactors = F)
load("Data/train_clean.RData")  # 891 obs
load("Data/test_clean.RData")   # 418 obs
setwd("C:/Ruby193/_site/kaggle-titanic")
load("Data/train_clean.RData")  # 891 obs
load("Data/test_clean.RData")   # 418 obs
rstudio::viewData(train)
rstudio::viewData(train)
rstudio::viewData(test)
train
rstudio::viewData(train)
rstudio::viewData(test)
rstudio::viewData(train)
