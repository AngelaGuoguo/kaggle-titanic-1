}
k <- 21
j <- 1
track <- NULL
while (k != 0) {
j <- 1
for (i in 2:20) {
if (k %% i != 0) {
k <- k + 1
}
if (k %% i == 0) {
track[j] <- i
j <- j + 1
}
if (length(track) == 19) {
print(k)
break
}
}
}
k <- 21
j <- 1
track <- NULL
while (k != 0) {
j <- 1
for (i in 20:2) {
if (k %% i != 0) {
k <- k + 1
}
if (k %% i == 0) {
track[j] <- i
j <- j + 1
}
if (length(track) == 19) {
print(k)
break
}
}
}
k <- 1
j <- 1
track <- NULL
while (k != 0) {
j <- 1
for (i in 20:2) {
if (k %% i != 0) {
k <- k + 1
}
if (k %% i == 0) {
track[j] <- i
j <- j + 1
}
if (length(track) == 19) {
print(k)
break
}
}
}
is.prime <- function(x) {
for (i in 2:sqrt(x)) {
if (x %% i == 0) {
print("not prime")
break
}
}
print("prime")
}
is.prime(13)
# Project Euler - Problem 4
# A palindromic number reads the same both ways. The largest palindrome made
# from the product of two 2-digit numbers is 9009 = 91 * 99.
# Find the largest palindrome made from the product of two 3-digit numbers.
library(stringr)
flip <- function(x) {
reverse <- 0
while (x > 0) {
reverse <- (reverse * 10) + (x %% 10)
x <- x/10
}
print(reverse)
}
str_split(123456)
str_split(123456, 3)
str_split(123456, "")
?str_split
str_split(123456, "2")
str_split(123456, "[0-9]")
str_split(123456, "[0-9]?")
str_split(123456, "[0-9]!")
str_split(123456, "[:digit:]")
str_split(123456, [:digit:])
str_split(123456, "[:digit:]")
str_split(123456, "[:digit:][:digit:]")
str_split(123456, "[:digit:][:digit:][:digit:]")
str_split(123456, "[:digit:]")
?str_split
?strsplit
str_split(123456)
str_split(123456, "")
str_split(123456, )
str_split(123456, NULL)
str_split(123456, "")[[1]]
str_split(123456, "")[[1]][1]
str_split(123456, "")[[1]][-1]
str_split(123456, "")[[1]][-1]
str_split(123456, "")[[1]][-1]
flip <- function(x) {
x <- str_split(x, "")[[1]][-1]
x <- x[length(x):1]
}
flip <- function(x) {
x <- str_split(x, "")[[1]][-1]
print(x[length(x):1])
}
flip(123456)
flip <- function(x) {
x <- str_split(x, "")[[1]][-1]
x <- as.numeric(x[length(x):1])
}
flip(123456)
flip <- function(x) {
x <- str_split(x, "")[[1]][-1]
x <- as.numeric(x[length(x):1])
print(x)
}
flip(123)
str_split(123456, "")[[1]][-1]
x <- str_split(x, "")[[1]][-1]
y <- as.numeric(x[length(x):1])
y
x <- str_split(123456, "")[[1]][-1]
y <- as.numeric(x[length(x):1])
y
as.numeric(x[length(x):1])
x[length(x):1]
as.numeric(x[length(x):1])
?as.numeric
as.integer(x[length(x):1])
str_merge
str_combine
?stringr
str_c((x[length(x):1])
)
x[length(x):1]
str_c(as.numeric(x[length(x):1]))
?str_c
?paste
paste(as.numeric(x[length(x):1]))
str_c(as.numeric(x[length(x):1]), collapse = "")
str_c(x[length(x):1], collapse = "")
as.numeric(str_c(x[length(x):1], collapse = ""))
flip <- function(x) {
x <- str_split(x, "")[[1]][-1]
flipped <- as.numeric(str_c(x[length(x):1], collapse = ""))
print(flipped)
}
flip(12345)
isPalindromic <- function(x) {
if (x == flip(x)) {
print(TRUE)
}
else {
print(FALSE)
}
}
isPalindromic(123321)
flip <- function(x) {
x <- str_split(x, "")[[1]][-1]
flipped <- as.numeric(str_c(x[length(x):1], collapse = ""))
print(flipped)
}
flip(x)
flip(123456)
isPal <- function(x) {
if (x == flip(x)) {
print(TRUE)
}
else {
print(FALSE)
}
}
is.pal <- function(x) {
if (x == flip(x)) {
print(TRUE)
}
else {
print(FALSE)
}
}
is.pal(123)
flip <- function(x) {
x <- str_split(x, "")[[1]][-1]
flipped <- as.numeric(str_c(x[length(x):1], collapse = ""))
return(flipped)
}
is.pal <- function(x) {
if (x == flip(x)) {
print(TRUE)
}
else {
print(FALSE)
}
}
is.pal(123)
is.pal <- function(x) {
if (x == flip(x)) {
return(TRUE)
}
else {
return(FALSE)
}
}
is.pal(123)
is.logical(is.pal(123))
is.pal <- function(x) {
if (x == flip(x)) {
return(TRUE)
}
else {
return(FALSE)
}
}
is.palindromic <- function(x) {
x <- unlist(str_split(x, ""))[-1]
if (identical(x[1], x[6]) && identical(x[2], x[5]) && identical(x[3], x[4])) {
return(as.logical("TRUE"))
}
else {
return(as.logical("FALSE"))
}
}
max <- 0
product <- 0
for(i in 100:999) {
for (j in 100:i) {
product <- i * j
if (is.pal(product) == TRUE && product > max) {
max <- product
print(max)
}
}
}
max <- 0
product <- 0
for(i in 999:100) {
for (j in i:100) {
product <- i * j
if (is.pal(product) == TRUE && product > max) {
max <- product
print(max)
}
}
}
setwd("C:/Users/matt/kaggle-titanic/Data")
train <- read.csv("train.csv", stringsAsFactors = F) # 891 obs
test <- read.csv("test.csv", stringsAsFactors = F)   # 418 obs
# Improve the prediction by considering Passenger Class & Fare
# Consider Fare price by bining from <10, 10-20, 20-30, >30
bin.1 <- train$fare < 10
bin.2 <- 10 <= train$fare & train$fare < 20
bin.3 <- 20 <= train$fare & train$fare <= 30
bin.4 <- 30 < train$fare
train$fare.bin[bin.1] <- "<10"
train$fare.bin[bin.2] <- "10-20"
train$fare.bin[bin.3] <- "20-30"
train$fare.bin[bin.4] <- ">30"
train$fare.bin <- factor(train$fare.bin, levels = c("<10", "10-20", "20-30", ">30"))
qplot(factor(survived), data = train, fill = fare.bin) + facet_wrap(~ pclass)
library(ggplot2)
# Kaggle - Titanic: Machine Learning from Disaster
# Getting started with Excel in R
library(ggplot2)
train <- read.csv("train.csv", stringsAsFactors = F) # 891 obs
test <- read.csv("test.csv", stringsAsFactors = F)   # 418 obs
# Look at proportion of survival by sex
qplot(factor(survived), data = train, fill = sex) + facet_wrap(~ sex)
male <- train$sex == "male"
female <- train$sex == "female"
lived <- train$survived == "1"
(length(train[male & lived, 1]) / length(train[male, 1])) * 100
(length(train[female & lived, 1]) / length(train[female, 1])) * 100
# prop male survived: 19%; prop female survived: 74%
# We will say that all women are going to live; all men are going to die
# Make the first gender-based prediction
#test$survived[test$sex == "female"] <- 1
#test$survived[test$sex == "male"] <- 0
#write.csv(test, "genderbasedmodel.csv")
# Improve the prediction by considering Age
adult <- train$age > 18
child <- train$age <= 18
train$age.bin[adult] <- "adult"
train$age.bin[child] <- "child"
train$age.bin[!adult & !child] <- NA
qplot(factor(survived), data = train, fill = sex) + facet_wrap(~ age.bin)
length(train[adult & male & lived & !is.na(train$age), 1]) /
length(train[adult & male & !is.na(train$age), 1])
length(train[adult & female & lived & !is.na(train$age), 1]) /
length(train[adult & female & !is.na(train$age), 1])
# Age doesn't give much additional information (than sex) regarding survivability
# Improve the prediction by considering Passenger Class & Fare
# Consider Fare price by bining from <10, 10-20, 20-30, >30
bin.1 <- train$fare < 10
bin.2 <- 10 <= train$fare & train$fare < 20
bin.3 <- 20 <= train$fare & train$fare <= 30
bin.4 <- 30 < train$fare
train$fare.bin[bin.1] <- "<10"
train$fare.bin[bin.2] <- "10-20"
train$fare.bin[bin.3] <- "20-30"
train$fare.bin[bin.4] <- ">30"
train$fare.bin <- factor(train$fare.bin, levels = c("<10", "10-20", "20-30", ">30"))
qplot(factor(survived), data = train, fill = fare.bin) + facet_wrap(~ pclass)
length(train[adult & male & lived, 1]) / length(train[adult & male, 1])
length(train[adult & male & lived, 1]) / length(train[adult & male, 1])
head(test$pclass)
test$pclass == "3"
test$fare <= "20"
test$survived[female & test$pclass == "3" & test$fare <= "20"] <- 0
test$survived[female && test$pclass == "3" && test$fare <= "20"] <- 0
test$survived
test$survived[male] <- 0
test$survived[female && test$pclass == "3" && test$fare <= "20"] <- 0
test <- read.csv("test.csv", stringsAsFactors = F)   # 418 obs
test$survived[female & test$pclass == "3" & test$fare <= "20"] <- 0
test$survived[test$sex == "male"] <- 0
test$survived[test$sex == "female" & test$pclass == "3" & test$fare <= "20"] <- 0
test$survived
test <- read.csv("test.csv", stringsAsFactors = F)   # 418 obs
test$survived[test$sex == "male"] <- 0
test$survived[test$sex == "female" & test$pclass == "3" & test$fare <= "20"] <- 0
test$survived
test$survived[is.na(test$survived)]
test$survived[test$sex == "male"] <- 0
test$survived[test$sex == "female" & test$pclass == "3" & test$fare <= "20"] <- 0
test$survived[is.na(test$survived)] <- 1
test$survived
test$survived[test$sex == "male"] <- 0
test$survived[test$sex == "female"] <- 1
test$survived[test$sex == "female" & test$pclass == "3" & test$fare <= "20"] <- 0
test$survived
train$male
train <- read.csv("train.csv", stringsAsFactors = F) # 891 obs
# Kaggle - Titanic: Machine Learning from Disaster
# Getting started with Excel in R
library(ggplot2)
train <- read.csv("train.csv", stringsAsFactors = F) # 891 obs
test <- read.csv("test.csv", stringsAsFactors = F)   # 418 obs
# Look at proportion of survival by sex
qplot(factor(survived), data = train, fill = sex) + facet_wrap(~ sex)
male <- train$sex == "male"
female <- train$sex == "female"
lived <- train$survived == "1"
(length(train[male & lived, 1]) / length(train[male, 1])) * 100
(length(train[female & lived, 1]) / length(train[female, 1])) * 100
# prop male survived: 19%; prop female survived: 74%
# We will say that all women are going to live; all men are going to die
# Make the first gender-based prediction
test$survived[test$sex == "female"] <- 1
test$survived[test$sex == "male"] <- 0
write.csv(test, "genderbasedmodel.csv")
# Improve the prediction by considering Age
adult <- train$age > 18
child <- train$age <= 18
train$age.bin[adult] <- "adult"
train$age.bin[child] <- "child"
train$age.bin[!adult & !child] <- NA
qplot(factor(survived), data = train, fill = sex) + facet_wrap(~ age.bin)
length(train[adult & male & lived & !is.na(train$age), 1]) /
length(train[adult & male & !is.na(train$age), 1])
length(train[adult & female & lived & !is.na(train$age), 1]) /
length(train[adult & female & !is.na(train$age), 1])
# Age doesn't give much additional information (than sex) regarding survivability
# Improve the prediction by considering Passenger Class & Fare
# Consider Fare price by bining from <10, 10-20, 20-30, >30
bin.1 <- train$fare < 10
bin.2 <- 10 <= train$fare & train$fare < 20
bin.3 <- 20 <= train$fare & train$fare <= 30
bin.4 <- 30 < train$fare
train$fare.bin[bin.1] <- "<10"
train$fare.bin[bin.2] <- "10-20"
train$fare.bin[bin.3] <- "20-30"
train$fare.bin[bin.4] <- ">30"
train$fare.bin <- factor(train$fare.bin, levels = c("<10", "10-20", "20-30", ">30"))
qplot(factor(survived), data = train, fill = fare.bin) + facet_wrap(~ pclass)
# Make the improved genderclass-based prediction
test$survived[test$sex == "male"] <- 0
test$survived[test$sex == "female"] <- 1
test$survived[test$sex == "female" & test$pclass == "3" & test$fare <= "20"] <- 0
write.csv(test, "genderbased-classmodel.csv")
qplot(factor(survived), data = train, fill = sex)
qplot(factor(survived), data = train, fill = sex) + facet_wrap(~ fare.bin)
third <- subset(train, pclass = "3")
qplot(factor(survived), data = third, fill = sex) + facet_wrap(~ fare.bin)
third <- subset(train, pclass = "3")
qplot(factor(survived), data = third, fill = sex) + facet_wrap(~ fare.bin)
third <- subset(train, pclass == "3")
qplot(factor(survived), data = third, fill = sex) + facet_wrap(~ fare.bin)
test$survived[test$sex == "male"] <- 0
test$survived[test$sex == "female"] <- 1
test$survived[test$sex == "female" & test$pclass == "3" & test$fare >= "20"] <- 0
write.csv(test, "genderbased-classmodel.csv")
# Kaggle - Titanic: Machine Learning from Disaster
# Getting started with Excel in R
library(ggplot2)
train <- read.csv("train.csv", stringsAsFactors = F) # 891 obs
test <- read.csv("test.csv", stringsAsFactors = F)   # 418 obs
# Look at proportion of survival by sex
qplot(factor(survived), data = train, fill = sex) + facet_wrap(~ sex)
male <- train$sex == "male"
female <- train$sex == "female"
lived <- train$survived == "1"
(length(train[male & lived, 1]) / length(train[male, 1])) * 100
(length(train[female & lived, 1]) / length(train[female, 1])) * 100
# prop male survived: 19%; prop female survived: 74%
# We will say that all women are going to live; all men are going to die
# Make the first gender-based prediction
test$survived[test$sex == "female"] <- 1
test$survived[test$sex == "male"] <- 0
write.csv(test, "genderbasedmodel.csv")
# Improve the prediction by considering Age
adult <- train$age > 18
child <- train$age <= 18
train$age.bin[adult] <- "adult"
train$age.bin[child] <- "child"
train$age.bin[!adult & !child] <- NA
qplot(factor(survived), data = train, fill = sex) + facet_wrap(~ age.bin)
length(train[adult & male & lived & !is.na(train$age), 1]) /
length(train[adult & male & !is.na(train$age), 1])
length(train[adult & female & lived & !is.na(train$age), 1]) /
length(train[adult & female & !is.na(train$age), 1])
# Age doesn't give much additional information (than sex) regarding survivability
# Improve the prediction by considering Passenger Class & Fare
# Consider Fare price by bining from <10, 10-20, 20-30, >30
bin.1 <- train$fare < 10
bin.2 <- 10 <= train$fare & train$fare < 20
bin.3 <- 20 <= train$fare & train$fare <= 30
bin.4 <- 30 < train$fare
train$fare.bin[bin.1] <- "<10"
train$fare.bin[bin.2] <- "10-20"
train$fare.bin[bin.3] <- "20-30"
train$fare.bin[bin.4] <- ">30"
train$fare.bin <- factor(train$fare.bin, levels = c("<10", "10-20", "20-30", ">30"))
qplot(factor(survived), data = train, fill = fare.bin) + facet_wrap(~ pclass)
# Make the improved genderclass-based prediction
third <- subset(train, pclass == "3")
qplot(factor(survived), data = third, fill = sex) + facet_wrap(~ fare.bin)
test$survived[test$sex == "male"] <- 0
test$survived[test$sex == "female"] <- 1
test$survived[test$sex == "female" & test$pclass == "3" & test$fare >= "20"] <- 0
write.csv(test, "genderbased-classmodel.csv")
# Why are women in third class who paid more for their ticket more likely not to survive?
str(test)
# Goal: Exploratory data analysis to answer the question: Why are women in
#       third class who paid more for their ticket more likely not to survive?
library(ggplot2)
train <- read.csv("train.csv", stringsAsFactors = F) # 891 obs
test <- read.csv("test.csv", stringsAsFactors = F)   # 418 obs
qplot(factor(survived), data = train, fill = fare.bin) + facet_wrap(~ pclass)
# Goal: Exploratory data analysis to answer the question: Why are women in
#       third class who paid more for their ticket more likely not to survive?
library(ggplot2)
train <- read.csv("train.csv", stringsAsFactors = F) # 891 obs
test <- read.csv("test.csv", stringsAsFactors = F)   # 418 obs
# Consider fare by bining from <10, 10-20, 20-30, >30
bin.1 <- train$fare < 10
bin.2 <- 10 <= train$fare & train$fare < 20
bin.3 <- 20 <= train$fare & train$fare <= 30
bin.4 <- 30 < train$fare
train$fare.bin[bin.1] <- "<10"
train$fare.bin[bin.2] <- "10-20"
train$fare.bin[bin.3] <- "20-30"
train$fare.bin[bin.4] <- ">30"
train$fare.bin <- factor(train$fare.bin, levels = c("<10", "10-20", "20-30", ">30"))
qplot(factor(survived), data = train, fill = fare.bin) + facet_wrap(~ pclass)
# Make the improved genderclass-based prediction
third <- subset(train, pclass == "3")
qplot(factor(survived), data = third, fill = sex) + facet_wrap(~ fare.bin)
test$survived[test$sex == "male"] <- 0
test$survived[test$sex == "female"] <- 1
test$survived[test$sex == "female" & test$pclass == "3" & test$fare >= "20"] <- 0
write.csv(test, "genderbased-classmodel.csv")
qplot(factor(survived), data = train, fill = fare.bin) + facet_wrap(~ pclass)
qplot(factor(survived), data = third, fill = sex) + facet_wrap(~ fare.bin)
qplot(factor(survived), data = train, fill = fare.bin) + facet_wrap(~ pclass)
qplot(factor(survived), data = train, fill = sex) + facet_wrap(~ pclass)
qplot(factor(survived), data = third, fill = sex) + facet_wrap(~ fare.bin)
weird <- subset(train, pclass == "3" & fare >= "20" & sex == "female")
str(weird)
summary(weird)
str(weird)
weird <- subset(train, pclass == "3" && fare >= "20" && sex == "female") # 101 obs
str(weird)
weird <- subset(train, pclass == "3" & fare >= "20" & sex == "female") # 101 obs
str(train$fare)
weird <- subset(train, pclass == "3" & fare >= 20 & sex == "female") # 101 obs
str(weird)
summary(weird)
weird$embarked
table(train$embarked)
table(weird$embarked)
summary(weird)
summary(train)
women <- subset(train, sex == "female")
summary(women)
women_died <- subset(train, sex == "female" & survived == "0")
summary(women_died)
qplot(sibsp, parch, data = train)
qplot(sibsp, parch, data = train, geom = "jitter")
women_died <- subset(train, sex == "female" & survived == "0", age >= "18")
summary(women_died)
summary(weird)
weird$name
weird$ticket
