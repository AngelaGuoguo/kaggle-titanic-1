install.packages('party')
library(party)
# Goal: construct baisc randomForest model (aka baby's first randomForest)
library(randomForest)
library(plyr)
train <- read.csv("train.csv", stringsAsFactors = FALSE)  # 891 obs
test <- read.csv("test.csv", stringsAsFactors = FALSE)    # 418 obs
###
### Clean the data set before running randomForest
###
# Combine the data sets for age/fare modeling
full <- join(test, train, type = "full")
# Create models for predicting missing values in AGE and FARE
age.mod <- lm(age ~ factor(pclass) + factor(sex) + sibsp + parch + fare, data = full)
fare.mod<- lm(fare ~ factor(pclass) + factor(sex) + sibsp + parch + age, data = full)
# Replace missing values in AGE and FARE with prediction
train$age[is.na(train$age)] <- predict(age.mod, train)
train$fare[is.na(train$fare)] <- predict(fare.mod, train)
test$age[is.na(test$age)] <- predict(age.mod, test)
test$fare[is.na(test$fare)] <- predict(fare.mod, test)
# Replace missing values in embarked with most popular
train$embarked[train$embarked == ""] <- "S"
# Convert to factors
train$sex <- factor(train$sex)
train$embarked <- factor(train$embarked)
train$survived <- factor(train$survived)
train$pclass <- factor(train$pclass)
test$sex <- factor(test$sex)
test$embarked <- factor(test$embarked)
test$pclass <- factor(test$pclass)
setwd("C:/Users/matt/kaggle-titanic/Data")
# Goal: construct baisc randomForest model (aka baby's first randomForest)
library(randomForest)
library(plyr)
train <- read.csv("train.csv", stringsAsFactors = FALSE)  # 891 obs
test <- read.csv("test.csv", stringsAsFactors = FALSE)    # 418 obs
###
### Clean the data set before running randomForest
###
# Combine the data sets for age/fare modeling
full <- join(test, train, type = "full")
# Create models for predicting missing values in AGE and FARE
age.mod <- lm(age ~ factor(pclass) + factor(sex) + sibsp + parch + fare, data = full)
fare.mod<- lm(fare ~ factor(pclass) + factor(sex) + sibsp + parch + age, data = full)
# Replace missing values in AGE and FARE with prediction
train$age[is.na(train$age)] <- predict(age.mod, train)
train$fare[is.na(train$fare)] <- predict(fare.mod, train)
test$age[is.na(test$age)] <- predict(age.mod, test)
test$fare[is.na(test$fare)] <- predict(fare.mod, test)
# Replace missing values in embarked with most popular
train$embarked[train$embarked == ""] <- "S"
# Convert to factors
train$sex <- factor(train$sex)
train$embarked <- factor(train$embarked)
train$survived <- factor(train$survived)
train$pclass <- factor(train$pclass)
test$sex <- factor(test$sex)
test$embarked <- factor(test$embarked)
test$pclass <- factor(test$pclass)
?ctree
forest <- randomForest(survived ~ pclass + sex + age +
sibsp + parch + embarked, data = train,
ntree = 50000, importance = TRUE)
train$survived_pred <- predict(forest, train, type = "class")
which(train$survived_pred != train$survived)
tree <- ctree(survived ~ pclass + sex + age +
sibsp + parch + embarked, data = train)
# Check to see how many predictions our forest gets
# correct in the test data set. This gives us a rough
# estimate of how our model might perform
train$survived_pred <- predict(tree, train, type = "class")
which(train$survived_pred != train$survived)
length(which(train$survived_pred != train$survived))
train$survived_pred <- predict(forest, train, type = "class")
which(train$survived_pred != train$survived)
tree
tree <- ctree(survived ~ pclass + sex + age +
sibsp, data = train)
tree
train$survived_pred <- predict(tree, train, type = "class")
which(train$survived_pred != train$survived)
tree <- ctree(survived ~ pclass + sex + age +
sibsp, data = train)
# Check to see how many predictions our forest gets
# correct in the test data set. This gives us a rough
# estimate of how our model might perform
train$survived_pred <- predict(tree, train, type = "class")
predict(tree, train, type = "class")
train$survived_pred <- predict(tree, train)
which(train$survived_pred != train$survived)
tree <- ctree(survived ~ pclass + sex + age + sibsp + parch, data = train)
train$survived_pred <- predict(tree, train)
which(train$survived_pred != train$survived)
sex
train$sex
str(train)
tree <- ctree(survived ~ pclass + sex + pclass:sex + age + sibsp + parch, data = train)
train$survived_pred <- predict(tree, train)
which(train$survived_pred != train$survived)
tree <- ctree(survived ~ emarked + pclass + sex + pclass:sex + age + sibsp + parch, data = train)
# Check to see how many predictions our forest gets
# correct in the test data set. This gives us a rough
# estimate of how our model might perform
train$survived_pred <- predict(tree, train)
which(train$survived_pred != train$survived)
tree <- ctree(survived ~ pclass + sex + age +
sibsp + parch + embarked, data = train)
train$survived_pred <- predict(tree, train)
which(train$survived_pred != train$survived)
tree <- ctree(factor(survived) ~ pclass + sex + age +
sibsp + parch + embarked, data = train)
train$survived_pred <- predict(tree, train)
which(train$survived_pred != train$survived)
tree <- ctree(factor(train$survived) ~ pclass + sex + age +
sibsp + parch + embarked, data = train)
# Check to see how many predictions our forest gets
# correct in the test data set. This gives us a rough
# estimate of how our model might perform
train$survived_pred <- predict(tree, train)
which(train$survived_pred != train$survived)
tree <- ctree(survived ~ pclass + sex + age +
sibsp + parch + embarked + pclass:sex, data = train)
# Check to see how many predictions our forest gets
# correct in the test data set. This gives us a rough
# estimate of how our model might perform
train$survived_pred <- predict(tree, train)
which(train$survived_pred != train$survived)
logit <- glm((survived ~ pclass + sex + age + sibsp + parch + embarked + pclass:sex,
logit <- glm(survived ~ pclass + sex + age + sibsp +
parch + embarked + pclass:sex,
family = binomial(logit), data = train)
train$survived_pred <- predict(logit, train)
which(train$survived_pred != train$survived)
logit <- glm(survived ~ pclass + sex + age + sibsp +
parch + embarked,
family = binomial(logit), data = train)
predict(logit, train)
pr <- predict(logit, train)
pr[pr >= .5]
logit <- glm(survived ~ pclass + sex + age + sibsp +
parch + embarked,
family = binomial(logit), data = train)
pr <- predict(logit, train)
pr[pr >= .5] <- 1
pr[pr < .5] <- 0
train$survived_pred <- pr
which(train$survived_pred != train$survived)
logit <- glm(survived ~ pclass + sex + age + sibsp +
parch + embarked, family = binomial(logit), data = train)
summary(logit)
# Goal: construct baisc randomForest model (aka baby's first randomForest)
library(randomForest)
library(plyr)
train <- read.csv("train.csv", stringsAsFactors = FALSE)  # 891 obs
test <- read.csv("test.csv", stringsAsFactors = FALSE)    # 418 obs
###
### Clean the data set before running randomForest
###
# Combine the data sets for age/fare modeling
full <- join(test, train, type = "full")
# Create models for predicting missing values in AGE and FARE
age.mod <- lm(age ~ factor(pclass) + factor(sex) + sibsp + parch + fare, data = full)
fare.mod<- lm(fare ~ factor(pclass) + factor(sex) + sibsp + parch + age, data = full)
# Replace missing values in AGE and FARE with prediction
train$age[is.na(train$age)] <- predict(age.mod, train)
train$fare[is.na(train$fare)] <- predict(fare.mod, train)
test$age[is.na(test$age)] <- predict(age.mod, test)
test$fare[is.na(test$fare)] <- predict(fare.mod, test)
# Replace missing values in embarked with most popular
train$embarked[train$embarked == ""] <- "S"
# Convert to factors
train$sex <- factor(train$sex)
train$embarked <- factor(train$embarked)
train$survived <- factor(train$survived)
test$sex <- factor(test$sex)
test$embarked <- factor(test$embarked)
logit <- glm(survived ~ pclass + sex + age + sibsp +
parch + embarked, family = binomial(logit), data = train)
pr <- predict(logit, train)
pr[pr >= .5] <- 1
pr[pr < .5] <- 0
train$survived_pred <- pr
which(train$survived_pred != train$survived)
tree <- ctree(survived ~ pclass + sex + age +
sibsp + parch + embarked + pclass:sex, data = train)
# Check to see how many predictions our forest gets
# correct in the test data set. This gives us a rough
# estimate of how our model might perform
train$survived_pred <- predict(tree, train)
which(train$survived_pred != train$survived)
tree <- ctree(survived ~ pclass + sex + age +
sibsp + parch + embarked, data = train)
# Check to see how many predictions our forest gets
# correct in the test data set. This gives us a rough
# estimate of how our model might perform
train$survived_pred <- predict(tree, train)
which(train$survived_pred != train$survived)
# Create forest without name, ticket, cabin, or embarked
forest <- randomForest(survived ~ pclass + sex + age +
sibsp + parch + embarked, data = train,
ntree = 10000, importance = TRUE)
# Extract the importance of each variable
importance(forest)
# Check to see how many predictions our forest gets
# correct in the test data set. This gives us a rough
# estimate of how our model might perform
train$survived_pred <- predict(forest, train, type = "class")
which(train$survived_pred != train$survived)
forest
logit <- glm(survived ~ pclass + sex + age + sibsp +
parch + embarked, family = binomial(logit), data = train)
pr <- predict(logit, train)
predict(logit, train)
pr[pr >= 0] <- 1
pr[pr < 0] <- 0
train$survived_pred <- pr
which(train$survived_pred != train$survived)
library(kernlab)
svm.model <- ksvm(survived ~ pclass + sex + age +
sibsp + parch + embarked, data = train)
train$survived_pred <- predict(svm.model, train, type = "response")
which(train$survived_pred != train$survived)
train$survived_pred <- predict(forest, train, type = "class")
which(train$survived_pred != train$survived)
svm.model <- ksvm(survived ~ pclass + sex + age +
sibsp + parch + embarked, data = train)
# Check to see how many predictions our forest gets
# correct in the test data set. This gives us a rough
# estimate of how our model might perform
train$survived_pred <- predict(svm.model, train, type = "response")
which(train$survived_pred != train$survived)
svm.model <- ksvm(survived ~ pclass + sex + age +
sibsp + parch + embarked + pclass:sex, data = train)
train$survived_pred <- predict(svm.model, train, type = "response")
which(train$survived_pred != train$survived)
library(class)
knn(train, test, cl)
?knn
factor(survived)
factor("survived")
factor("survived", 1)
knn(train, test, factor("survived", 1))
knn(train, test, factor(survived, 1))
knn(train, test, factor(train$survived, 1))
factor(train$survived, 1)
factor(rep(train$survived, 1))
train$survived
knn(train, test, factor(rep(train$survived, 1)))
