j <- j + 1
}
if (length(track) == 19) {
print(k)
break
}
}
}
k <- 1
j <- 1
track <- NULL
while (k != 0) {
j <- 1
for (i in 20:2) {
if (k %% i != 0) {
k <- k + 1
}
if (k %% i == 0) {
track[j] <- i
j <- j + 1
}
if (length(track) == 19) {
print(k)
break
}
}
}
is.prime <- function(x) {
for (i in 2:sqrt(x)) {
if (x %% i == 0) {
print("not prime")
break
}
}
print("prime")
}
is.prime(13)
# Project Euler - Problem 4
# A palindromic number reads the same both ways. The largest palindrome made
# from the product of two 2-digit numbers is 9009 = 91 * 99.
# Find the largest palindrome made from the product of two 3-digit numbers.
library(stringr)
flip <- function(x) {
reverse <- 0
while (x > 0) {
reverse <- (reverse * 10) + (x %% 10)
x <- x/10
}
print(reverse)
}
str_split(123456)
str_split(123456, 3)
str_split(123456, "")
?str_split
str_split(123456, "2")
str_split(123456, "[0-9]")
str_split(123456, "[0-9]?")
str_split(123456, "[0-9]!")
str_split(123456, "[:digit:]")
str_split(123456, [:digit:])
str_split(123456, "[:digit:]")
str_split(123456, "[:digit:][:digit:]")
str_split(123456, "[:digit:][:digit:][:digit:]")
str_split(123456, "[:digit:]")
?str_split
?strsplit
str_split(123456)
str_split(123456, "")
str_split(123456, )
str_split(123456, NULL)
str_split(123456, "")[[1]]
str_split(123456, "")[[1]][1]
str_split(123456, "")[[1]][-1]
str_split(123456, "")[[1]][-1]
str_split(123456, "")[[1]][-1]
flip <- function(x) {
x <- str_split(x, "")[[1]][-1]
x <- x[length(x):1]
}
flip <- function(x) {
x <- str_split(x, "")[[1]][-1]
print(x[length(x):1])
}
flip(123456)
flip <- function(x) {
x <- str_split(x, "")[[1]][-1]
x <- as.numeric(x[length(x):1])
}
flip(123456)
flip <- function(x) {
x <- str_split(x, "")[[1]][-1]
x <- as.numeric(x[length(x):1])
print(x)
}
flip(123)
str_split(123456, "")[[1]][-1]
x <- str_split(x, "")[[1]][-1]
y <- as.numeric(x[length(x):1])
y
x <- str_split(123456, "")[[1]][-1]
y <- as.numeric(x[length(x):1])
y
as.numeric(x[length(x):1])
x[length(x):1]
as.numeric(x[length(x):1])
?as.numeric
as.integer(x[length(x):1])
str_merge
str_combine
?stringr
str_c((x[length(x):1])
)
x[length(x):1]
str_c(as.numeric(x[length(x):1]))
?str_c
?paste
paste(as.numeric(x[length(x):1]))
str_c(as.numeric(x[length(x):1]), collapse = "")
str_c(x[length(x):1], collapse = "")
as.numeric(str_c(x[length(x):1], collapse = ""))
flip <- function(x) {
x <- str_split(x, "")[[1]][-1]
flipped <- as.numeric(str_c(x[length(x):1], collapse = ""))
print(flipped)
}
flip(12345)
isPalindromic <- function(x) {
if (x == flip(x)) {
print(TRUE)
}
else {
print(FALSE)
}
}
isPalindromic(123321)
flip <- function(x) {
x <- str_split(x, "")[[1]][-1]
flipped <- as.numeric(str_c(x[length(x):1], collapse = ""))
print(flipped)
}
flip(x)
flip(123456)
isPal <- function(x) {
if (x == flip(x)) {
print(TRUE)
}
else {
print(FALSE)
}
}
is.pal <- function(x) {
if (x == flip(x)) {
print(TRUE)
}
else {
print(FALSE)
}
}
is.pal(123)
flip <- function(x) {
x <- str_split(x, "")[[1]][-1]
flipped <- as.numeric(str_c(x[length(x):1], collapse = ""))
return(flipped)
}
is.pal <- function(x) {
if (x == flip(x)) {
print(TRUE)
}
else {
print(FALSE)
}
}
is.pal(123)
is.pal <- function(x) {
if (x == flip(x)) {
return(TRUE)
}
else {
return(FALSE)
}
}
is.pal(123)
is.logical(is.pal(123))
is.pal <- function(x) {
if (x == flip(x)) {
return(TRUE)
}
else {
return(FALSE)
}
}
is.palindromic <- function(x) {
x <- unlist(str_split(x, ""))[-1]
if (identical(x[1], x[6]) && identical(x[2], x[5]) && identical(x[3], x[4])) {
return(as.logical("TRUE"))
}
else {
return(as.logical("FALSE"))
}
}
max <- 0
product <- 0
for(i in 100:999) {
for (j in 100:i) {
product <- i * j
if (is.pal(product) == TRUE && product > max) {
max <- product
print(max)
}
}
}
max <- 0
product <- 0
for(i in 999:100) {
for (j in i:100) {
product <- i * j
if (is.pal(product) == TRUE && product > max) {
max <- product
print(max)
}
}
}
library(randomForest)
install.packages("randomForest")
library(randomForest)
rfNews()
predict.randomForest()
?randomForest
library(ggplot2)
install.packages("ggplot2")
setwd("C:/Users/matt/kaggle-titanic/Data")
# Getting started with random forests -- in R
library(randomForest)
library(ggplot2)
train <- read.csv("train.csv", stringsAsFactors = F)  # 891 obs
test <- read.csv("test.csv", stringsAsFactors = F)    # 418 obs
# Create tidy data set for runnig randomForest
train_tidy <- train
# Average age is 30, replace NA's with 30
train_tidy$age[is.na(train_tidy$age)] <- 30
# Convert survived, sex & embarked to factors
train_tidy$survived <- factor(train_tidy$survived)
train_tidy$sex <- factor(train_tidy$sex)
train_tidy$embarked <- factor(train_tidy$sex)
forest <- randomForest(survived ~ . -name -ticket -cabin, data = train_tidy)
# Make a prediction with our randomForest
predict(test, forest)
predict.randomForest
UseMethod
predict.randomForest(test, forest)
?predict.randomForest
predict(forest, test)
test$survived <- factor(test$survived)
test$survived <- factor(test$survived)
test$survived
test$survived
test$survived <- factor(test$survived)
test$survived
factor(test$survived)
predict(forest, test)
head(test)
test$survived <- NULL
test$survived <- factor(test$survived)
test$survived <- 0
test$survived <- factor(test$survived)
predict(forest, test)
# Getting started with random forests -- in R
library(randomForest)
library(ggplot2)
train <- read.csv("train.csv", stringsAsFactors = F)  # 891 obs
test <- read.csv("test.csv", stringsAsFactors = F)    # 418 obs
# Create tidy data set for runnig randomForest
train_tidy <- train
# Average age is 30, replace NA's with 30
train_tidy$age[is.na(train_tidy$age)] <- 30
# Convert survived, sex & embarked to factors
train_tidy$survived <- factor(train_tidy$survived)
train_tidy$sex <- factor(train_tidy$sex)
train_tidy$embarked <- factor(train_tidy$sex)
test$sex <- factor(test$sex)
test$embarked <- factor(test$embarked)
forest <- randomForest(survived ~ . -name -ticket -cabin, data = train_tidy)
# Make a prediction with our randomForest
predict(forest, test)
# Getting started with random forests -- in R
library(randomForest)
library(ggplot2)
train <- read.csv("train.csv", stringsAsFactors = F)  # 891 obs
test <- read.csv("test.csv", stringsAsFactors = F)    # 418 obs
# Create tidy data set for runnig randomForest
train_tidy <- train
# Average age is 30, replace NA's with 30
train_tidy$age[is.na(train_tidy$age)] <- 30
# Convert survived, sex & embarked to factors
train_tidy$sex <- factor(train_tidy$sex)
train_tidy$embarked <- factor(train_tidy$sex)
test$sex <- factor(test$sex)
test$embarked <- factor(test$embarked)
forest <- randomForest(factor(survived) ~ . -name -ticket -cabin, data = train_tidy)
# Make a prediction with our randomForest
predict(forest, test)
forest <- randomForest(factor(survived) ~ . -name -ticket -cabin -embarked, data = train_tidy)
predict(forest, test)
predict(forest, test, predict.all = TRUE)
predict(forest, test)
predict(forest, test, type = "class")
?na.roughfix
test$survived <- predict(forest, test, type = "class")
head(test$survived)
test(survived)
test$survived
forest <- randomForest(survived ~ . -name -ticket -cabin -embarked, data = train_tidy)
test$survived <- predict(forest, test, type = "class")
predict(forest, test, type = "class")
# Kaggle - Titanic: Machine Learning from Disaster
# Getting started with Excel in R
library(ggplot2)
train <- read.csv("train.csv", stringsAsFactors = F) # 891 obs
test <- read.csv("test.csv", stringsAsFactors = F)   # 418 obs
# Look at proportion of survival by sex
qplot(sex, data = train, fill = sex) + facet_wrap(~ survived)
qplot(survived, data = train, fill = sex)
ggplot(aes(x = survived), data = train) + geom_bar()
male <- train$sex == "male"
female <- train$sex == "female"
lived <- train$survived == "1"
prop.survived.male <- length(train[male & lived, 1]) / length(train[male, 1])
prop.survived.female <- length(train[female & lived, 1]) / length(train[female, 1])
# prop male survived: 19%; prop female survived: 74%
# We will say that all women are going to live; all men are going to die
# Make the first gender-based prediction
test$survived[test$sex == "female"] <- 1
test$survived[test$sex == "male"] <- 0
write.csv(test, "genderbasedmodel.csv")
# Improve the prediction by considering Age
adult <- train$age > 18
child <- train$age <= 18
train$age.bin[adult] <- "adult"
train$age.bin[child] <- "child"
qplot(sex, data = train, fill = age.bin) + facet_wrap(~ survived)
length(train[adult & male & lived, 1]) / length(train[adult & male, 1])
length(train[adult & female & lived, 1]) / length(train[adult & female, 1])
# Age doesn't give much additional information regarding survivability by sex
# Improve the prediction by considering Class
qplot(sex, data = train, fill = factor(pclass)) + facet_wrap(~ survived)
# Consider ticket price by bining from <10, 10-20, 20-30, >30
bin.1 <- train$fare < 10
bin.2 <- 10 <= train$fare & train$fare < 20
bin.3 <- 20 <= train$fare & train$fare <= 30
bin.4 <- 30 < train$fare
train$fare.bin[bin.1] <- "<10"
train$fare.bin[bin.2] <- "10-20"
train$fare.bin[bin.3] <- "20-30"
train$fare.bin[bin.4] <- ">30"
qplot(sex, data = train, fill = factor(fare.bin)) + facet_wrap(~ survived)
qplot(factor(survived), data = train, fill = factor(fare.bin)) + facet_wrap(~ sex)
length(train[adult & male & lived, 1]) / length(train[adult & male, 1])
qplot(sex, data = train, fill = sex) + facet_wrap(~ survived)
qplot(survived, data = train, fill = sex)
ggplot(aes(x = survived), data = train) + geom_bar()
qplot(sex, data = train, fill = sex) + facet_wrap(~ survived)
qplot(factor(survived), data = train, fill = factor(fare.bin)) + facet_wrap(~ sex)
qplot(sex, data = train, fill = factor(fare.bin)) + facet_wrap(~ survived)
qplot(sex, data = train, fill = factor(fare.bin)) + facet_wrap(~ survived)
qplot(sex, data = train, fill = sex) + facet_wrap(~ survived)
qplot(survived, data = train, fill = sex)
ggplot(aes(x = survived), data = train) + geom_bar()
qplot(survived, data = train, fill = sex)
qplot(survived, data = train, fill = sex) + facet_wrap(~ sex)
ggplot(aes(x = survived), data = train) + geom_bar()
qplot(survived, data = train, fill = sex) + facet_wrap(~ sex)
qplot(factor(survived), data = train, fill = sex) + facet_wrap(~ sex)
# Getting started with random forests -- in R
library(randomForest)
library(ggplot2)
train <- read.csv("train.csv", stringsAsFactors = F)  # 891 obs
test <- read.csv("test.csv", stringsAsFactors = F)    # 418 obs
# Create tidy data set for runnig randomForest
train_tidy <- train
# Average age is 30, replace NA's with 30
train_tidy$age[is.na(train_tidy$age)] <- 30
# Convert survived, sex & embarked to factors
train_tidy$sex <- factor(train_tidy$sex)
train_tidy$embarked <- factor(train_tidy$sex)
test$sex <- factor(test$sex)
test$embarked <- factor(test$embarked)
forest <- randomForest(factor(survived) ~ . -name -ticket -cabin -embarked,
data = train_tidy,
na.action=na.roughfix)
# Make a prediction with our randomForest
test$survived <- predict(forest, test, type = "class")
forest <- randomForest(factor(survived) ~ . -name -ticket -cabin -embarked,
data = train_tidy)
predict(forest, test, type = "class")
is.na(test)
which(is.na(test))
which(is.na(test$age))
test$age[is.na(test$age)]
test$age[is.na(test$age)] <- 30
forest <- randomForest(factor(survived) ~ . -name -ticket -cabin -embarked,
data = train_tidy)
predict(forest, test, type = "class")
test
is.na(test)
na.roughfix(test)
?na.roughfix
str(test)
is.na(test$embark)
which(is.na(test$embark))
which(is.na(test$fare))
mean(train$fare)
is.na(test$fare) <- 32.20421
forest <- randomForest(factor(survived) ~ . -name -ticket -cabin -embarked,
data = train_tidy)
?randomForest
forest <- randomForest(factor(survived) ~ . -name -ticket -cabin -embarked,
data = train_tidy, ntree = 5000)
<- predict(forest, test, type = "class")
predict(forest, test, type = "class")
which(is.na(test$fare))
test$fare[is.na(test$fare)] <- 32.20421
# Getting started with random forests -- in R
library(randomForest)
library(ggplot2)
train <- read.csv("train.csv", stringsAsFactors = F)  # 891 obs
test <- read.csv("test.csv", stringsAsFactors = F)    # 418 obs
# Create tidy data set for runnig randomForest
train_tidy <- train
# Average age is 30, replace NA's with 30
train_tidy$age[is.na(train_tidy$age)] <- 30
test$age[is.na(test$age)] <- 30
test$fare[is.na(test$fare)] <- 32.20421
# Convert survived, sex & embarked to factors
train_tidy$sex <- factor(train_tidy$sex)
train_tidy$embarked <- factor(train_tidy$sex)
test$sex <- factor(test$sex)
test$embarked <- factor(test$embarked)
forest <- randomForest(factor(survived) ~ . -name -ticket -cabin -embarked,
data = train_tidy, ntree = 5000)
# Make a prediction with our randomForest
predict(forest, test, type = "class")
# issue with 32 and 153
str(predict(forest, test, type = "class"))
predict(forest, test, type = "class")[1]
test$survived <- predict(forest, test, type = "class")
head(test$survived)
table(test$survived)
136 / 282 * 100
save.csv
csv.save
write.csv("babys-first-forest.csv")
write.csv(test, "babys-first-forest.csv")
# baisc randomForest model (aka baby's first random forest)
library(randomForest)
library(ggplot2)
train <- read.csv("train.csv", stringsAsFactors = F)  # 891 obs
test <- read.csv("test.csv", stringsAsFactors = F)    # 418 obs
###
### Clean the data set before running randomForest
###
# Replace missing values in AGE and FARE with mean
train$age[is.na(train$age)] <- mean(train$age)
train$fare[is.na(train$fare)] <- mean(train$fare)
test$age[is.na(test$age)] <- mean(test$age)
test$fare[is.na(test$fare)] <- mean(test$fare)
# Convert survived, sex & embarked to factors
train$sex <- factor(train$sex)
train$embarked <- factor(train$sex)
train$survived <- factor(train$survived)
test$survived <- factor(test$survived)
test$sex <- factor(test$sex)
test$embarked <- factor(test$embarked)
forest <- randomForest(factor(survived) ~ . -name -ticket -cabin -embarked,
data = train_tidy, ntree = 5000)
# Create forest without name, tircket, cabin, or embarked
forest <- randomForest(factor(survived) ~ . -name -ticket -cabin -embarked,
data = train_tidy,
ntree = 5000,
importance=TRUE)
test$survived <- predict(forest, test, type = "class")
# baisc randomForest model (aka baby's first randomForest)
library(randomForest)
train <- read.csv("train.csv", stringsAsFactors = F)  # 891 obs
test <- read.csv("test.csv", stringsAsFactors = F)    # 418 obs
###
### Clean the data set before running randomForest
###
# Replace missing values in AGE and FARE with mean
train$age[is.na(train$age)] <- mean(train$age)
train$fare[is.na(train$fare)] <- mean(train$fare)
test$age[is.na(test$age)] <- mean(test$age)
test$fare[is.na(test$fare)] <- mean(test$fare)
# Convert survived, sex & embarked to factors
train$sex <- factor(train$sex)
train$embarked <- factor(train$sex)
train$survived <- factor(train$survived)
test$sex <- factor(test$sex)
test$embarked <- factor(test$embarked)
###
### Create randomForest object and make prediction
###
# Create forest without name, tircket, cabin, or embarked
forest <- randomForest(factor(survived) ~ . -name -ticket -cabin -embarked,
data = train_tidy,
ntree = 5000,
importance=TRUE)
# Make a prediction with our randomForest
test$survived <- predict(forest, test, type = "class")
# save csv file of forest
write.csv(test, "babys-first-forest.csv")
table(test$survived)
119 / (212+119)
