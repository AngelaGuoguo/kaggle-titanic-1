k <- k + 1
}
if (k %% i == 0) {
track[j] <- i
j <- j + 1
}
if (length(track) == 19) {
print(k)
break
}
}
}
k <- 2
j <- 1
track <- NULL
while (k != 0) {
j <- 1
for (i in 2:20) {
if (k %% i != 0) {
k <- k + 1
}
if (k %% i == 0) {
track[j] <- i
j <- j + 1
}
if (length(track) == 19) {
print(k)
break
}
}
}
k <- 21
j <- 1
track <- NULL
while (k != 0) {
j <- 1
for (i in 2:20) {
if (k %% i != 0) {
k <- k + 1
}
if (k %% i == 0) {
track[j] <- i
j <- j + 1
}
if (length(track) == 19) {
print(k)
break
}
}
}
k <- 21
j <- 1
track <- NULL
while (k != 0) {
j <- 1
for (i in 20:2) {
if (k %% i != 0) {
k <- k + 1
}
if (k %% i == 0) {
track[j] <- i
j <- j + 1
}
if (length(track) == 19) {
print(k)
break
}
}
}
k <- 1
j <- 1
track <- NULL
while (k != 0) {
j <- 1
for (i in 20:2) {
if (k %% i != 0) {
k <- k + 1
}
if (k %% i == 0) {
track[j] <- i
j <- j + 1
}
if (length(track) == 19) {
print(k)
break
}
}
}
is.prime <- function(x) {
for (i in 2:sqrt(x)) {
if (x %% i == 0) {
print("not prime")
break
}
}
print("prime")
}
is.prime(13)
# Project Euler - Problem 4
# A palindromic number reads the same both ways. The largest palindrome made
# from the product of two 2-digit numbers is 9009 = 91 * 99.
# Find the largest palindrome made from the product of two 3-digit numbers.
library(stringr)
flip <- function(x) {
reverse <- 0
while (x > 0) {
reverse <- (reverse * 10) + (x %% 10)
x <- x/10
}
print(reverse)
}
str_split(123456)
str_split(123456, 3)
str_split(123456, "")
?str_split
str_split(123456, "2")
str_split(123456, "[0-9]")
str_split(123456, "[0-9]?")
str_split(123456, "[0-9]!")
str_split(123456, "[:digit:]")
str_split(123456, [:digit:])
str_split(123456, "[:digit:]")
str_split(123456, "[:digit:][:digit:]")
str_split(123456, "[:digit:][:digit:][:digit:]")
str_split(123456, "[:digit:]")
?str_split
?strsplit
str_split(123456)
str_split(123456, "")
str_split(123456, )
str_split(123456, NULL)
str_split(123456, "")[[1]]
str_split(123456, "")[[1]][1]
str_split(123456, "")[[1]][-1]
str_split(123456, "")[[1]][-1]
str_split(123456, "")[[1]][-1]
flip <- function(x) {
x <- str_split(x, "")[[1]][-1]
x <- x[length(x):1]
}
flip <- function(x) {
x <- str_split(x, "")[[1]][-1]
print(x[length(x):1])
}
flip(123456)
flip <- function(x) {
x <- str_split(x, "")[[1]][-1]
x <- as.numeric(x[length(x):1])
}
flip(123456)
flip <- function(x) {
x <- str_split(x, "")[[1]][-1]
x <- as.numeric(x[length(x):1])
print(x)
}
flip(123)
str_split(123456, "")[[1]][-1]
x <- str_split(x, "")[[1]][-1]
y <- as.numeric(x[length(x):1])
y
x <- str_split(123456, "")[[1]][-1]
y <- as.numeric(x[length(x):1])
y
as.numeric(x[length(x):1])
x[length(x):1]
as.numeric(x[length(x):1])
?as.numeric
as.integer(x[length(x):1])
str_merge
str_combine
?stringr
str_c((x[length(x):1])
)
x[length(x):1]
str_c(as.numeric(x[length(x):1]))
?str_c
?paste
paste(as.numeric(x[length(x):1]))
str_c(as.numeric(x[length(x):1]), collapse = "")
str_c(x[length(x):1], collapse = "")
as.numeric(str_c(x[length(x):1], collapse = ""))
flip <- function(x) {
x <- str_split(x, "")[[1]][-1]
flipped <- as.numeric(str_c(x[length(x):1], collapse = ""))
print(flipped)
}
flip(12345)
isPalindromic <- function(x) {
if (x == flip(x)) {
print(TRUE)
}
else {
print(FALSE)
}
}
isPalindromic(123321)
flip <- function(x) {
x <- str_split(x, "")[[1]][-1]
flipped <- as.numeric(str_c(x[length(x):1], collapse = ""))
print(flipped)
}
flip(x)
flip(123456)
isPal <- function(x) {
if (x == flip(x)) {
print(TRUE)
}
else {
print(FALSE)
}
}
is.pal <- function(x) {
if (x == flip(x)) {
print(TRUE)
}
else {
print(FALSE)
}
}
is.pal(123)
flip <- function(x) {
x <- str_split(x, "")[[1]][-1]
flipped <- as.numeric(str_c(x[length(x):1], collapse = ""))
return(flipped)
}
is.pal <- function(x) {
if (x == flip(x)) {
print(TRUE)
}
else {
print(FALSE)
}
}
is.pal(123)
is.pal <- function(x) {
if (x == flip(x)) {
return(TRUE)
}
else {
return(FALSE)
}
}
is.pal(123)
is.logical(is.pal(123))
is.pal <- function(x) {
if (x == flip(x)) {
return(TRUE)
}
else {
return(FALSE)
}
}
is.palindromic <- function(x) {
x <- unlist(str_split(x, ""))[-1]
if (identical(x[1], x[6]) && identical(x[2], x[5]) && identical(x[3], x[4])) {
return(as.logical("TRUE"))
}
else {
return(as.logical("FALSE"))
}
}
max <- 0
product <- 0
for(i in 100:999) {
for (j in 100:i) {
product <- i * j
if (is.pal(product) == TRUE && product > max) {
max <- product
print(max)
}
}
}
max <- 0
product <- 0
for(i in 999:100) {
for (j in i:100) {
product <- i * j
if (is.pal(product) == TRUE && product > max) {
max <- product
print(max)
}
}
}
setwd("C:/Users/matt/kaggle-titanic/Data")
# baisc Support vector Machine
library(kernlab)
train <- read.csv("train.csv", stringsAsFactors = F)  # 891 obs
test <- read.csv("test.csv", stringsAsFactors = F)    # 418 obs
###
### Clean the data set before running SVC model
###
# Remove name, ticket, cabin
train <- train[ , -3] # remove name
train <- train[ , -7] # remove ticket
train <- train[ , -8] # remove cabin
# Replace missing values in AGE and FARE with mean
train$age[is.na(train$age)] <- mean(train$age)
train$fare[is.na(train$fare)] <- mean(train$fare)
test$age[is.na(test$age)] <- mean(test$age)
test$fare[is.na(test$fare)] <- mean(test$fare)
# Convert survived, sex, pclass, sibsp, parch & embarked to factors
train$survived <- factor(train$survived)
train$sex <- factor(train$sex)
train$pclass <- factor(train$pclass)
train$sibsp <- factor(train$sibsp)
train$parch <- factor(train$parch)
train$embarked <- factor(train$embarked)
test$sex <- factor(test$sex)
test$pclass <- factor(test$pclass)
test$sibsp <- factor(test$sibsp)
test$parch <- factor(test$parch)
test$embarked <- factor(test$embarked)
svm.model <- ksvm(factor(survived) ~ .,
data = train,
kernel = "rbfdot",
prob.model = FALSE,
type = "C-svc")
price
svm.model <- ksvm(factor(survived) ~ .,
data = train,
kernel = "rbfdot",
prob.model = TRUE,
type = "C-svc")
library(caret)
svm.model <- ksvm(factor(survived) ~ .,
data = train,
kernel = "rbfdot",
prob.model = FALSE,
type = "C-svc")
?ksvm
svm.model <- ksvm-class(factor(survived) ~ .,
data = train,
kernel = "rbfdot",
prob.model = FALSE,
type = "C-svc")
head(train)
svm.model <- ksvm(factor(survived) ~ .,
data = train,
kernel = "rbfdot",
prob.model = FALSE,
type = "C-svc")
# baisc Support vector Machine
library(kernlab)
train <- read.csv("train.csv", stringsAsFactors = F)  # 891 obs
test <- read.csv("test.csv", stringsAsFactors = F)    # 418 obs
###
### Clean the data set before running SVC model
###
# Remove name, ticket, cabin
train <- train[ , -3] # remove name
train <- train[ , -7] # remove ticket
train <- train[ , -8] # remove cabin
# Replace missing values in AGE and FARE with mean
train$age[is.na(train$age)] <- mean(train$age)
train$fare[is.na(train$fare)] <- mean(train$fare)
test$age[is.na(test$age)] <- mean(test$age)
test$fare[is.na(test$fare)] <- mean(test$fare)
# Convert survived, sex, pclass, sibsp, parch & embarked to factors
train$survived <- factor(train$survived)
train$sex <- factor(train$sex)
train$pclass <- factor(train$pclass)
train$sibsp <- factor(train$sibsp)
train$parch <- factor(train$parch)
train$embarked <- factor(train$embarked)
test$sex <- factor(test$sex)
test$pclass <- factor(test$pclass)
test$sibsp <- factor(test$sibsp)
test$parch <- factor(test$parch)
test$embarked <- factor(test$embarked)
# Create the SVM model
svm.model <- ksvm(factor(survived) ~ .,
data = train,
kernel = "rbfdot",
prob.model = FALSE,
type = "C-svc")
test$survived <- predict(svm.model, test, type = "class")
predict(svm.model, test, type = "response")
test$survived <- predict(svm.model, test, type = "decision")
predict(svm.model, test, type = "decision")
test$survived <- predict(svm.model, test, type = "response")
predict(svm.model, test, type = "response")
is.na(test)
# baisc Support vector Machine
library(kernlab)
train <- read.csv("train.csv", stringsAsFactors = F)  # 891 obs
test <- read.csv("test.csv", stringsAsFactors = F)    # 418 obs
###
### Clean the data set before running SVC model
###
# Remove name, ticket, cabin
train <- train[ , -3] # remove name
train <- train[ , -7] # remove ticket
train <- train[ , -8] # remove cabin
# Replace missing values in AGE and FARE with mean
train$age[is.na(train$age)] <- mean(train$age)
train$fare[is.na(train$fare)] <- mean(train$fare)
test$age[is.na(test$age)] <- mean(test$age)
test$fare[is.na(test$fare)] <- mean(test$fare)
# Convert survived, sex, pclass, sibsp, parch & embarked to factors
train$survived <- factor(train$survived)
train$sex <- factor(train$sex)
train$pclass <- factor(train$pclass)
train$sibsp <- factor(train$sibsp)
train$parch <- factor(train$parch)
train$embarked <- factor(train$embarked)
test$sex <- factor(test$sex)
test$pclass <- factor(test$pclass)
test$sibsp <- factor(test$sibsp)
test$parch <- factor(test$parch)
test$embarked <- factor(test$embarked)
# Create the SVM model
svm.model <- ksvm(factor(survived) ~ .,
data = train,
kernel = "rbfdot",
prob.model = FALSE,
type = "C-svc")
# Make a prediction with our SVM model
test$survived <- predict(svm.model, test, type = "response")
is.na(Test)
is.na(Ttest)
is.na(test)
test$age[is.na(test$age)] <- mean(test$age)
is.na(test)
mean(test$fare)
?mean
# baisc Support vector Machine
library(kernlab)
train <- read.csv("train.csv", stringsAsFactors = F)  # 891 obs
test <- read.csv("test.csv", stringsAsFactors = F)    # 418 obs
###
### Clean the data set before running SVC model
###
# Remove name, ticket, cabin
train <- train[ , -3] # remove name
train <- train[ , -7] # remove ticket
train <- train[ , -8] # remove cabin
# Replace missing values in AGE and FARE with mean
train$age[is.na(train$age)] <- mean(train$age, na.rm = TRUE)
train$fare[is.na(train$fare)] <- mean(train$fare, na.rm = TRUE)
test$age[is.na(test$age)] <- mean(test$age, na.rm = TRUE)
test$fare[is.na(test$fare)] <- mean(test$fare, na.rm = TRUE)
# Convert survived, sex, pclass, sibsp, parch & embarked to factors
train$survived <- factor(train$survived)
train$sex <- factor(train$sex)
train$pclass <- factor(train$pclass)
train$sibsp <- factor(train$sibsp)
train$parch <- factor(train$parch)
train$embarked <- factor(train$embarked)
test$sex <- factor(test$sex)
test$pclass <- factor(test$pclass)
test$sibsp <- factor(test$sibsp)
test$parch <- factor(test$parch)
test$embarked <- factor(test$embarked)
# Create the SVM model
svm.model <- ksvm(factor(survived) ~ .,
data = train,
kernel = "rbfdot",
prob.model = FALSE,
type = "C-svc")
# Make a prediction with our SVM model
test$survived <- predict(svm.model, test, type = "response")
predict(svm.model, test, type = "response")
svm.model <- ksvm(factor(survived) ~ .,
data = train)
predict(svm.model, test, type = "response")
head(train)
svm.model <- ksvm(factor(survived) ~ pclass + sex + age + sibsp + parch + fare + embarked, data = train)
predict(svm.model, test, type = "response")
str(train)
svm.model <- ksvm(factor(survived) ~ sex + age + fare, data = train)
predict(svm.model, test, type = "response")
test$survived <- predict(svm.model, test, type = "response")
train <- read.csv("train.csv", stringsAsFactors = F)  # 891 obs
svm.model <- ksvm(factor(survived) ~ factor(sex) + age + fare, data = train)
predict(svm.model, test, type = "response")
write.csv(test, "svm-model-01.csv")
test$survived <- predict(svm.model, test, type = "response")
write.csv(test, "svm-model-01.csv")
# baisc Support vector Machine
library(kernlab)
train <- read.csv("train.csv", stringsAsFactors = F)  # 891 obs
test <- read.csv("test.csv", stringsAsFactors = F)    # 418 obs
###
### Clean the data set before running SVC model
###
# Remove name, ticket, cabin
train <- train[ , -3] # remove name
train <- train[ , -7] # remove ticket
train <- train[ , -8] # remove cabin
# Replace missing values in AGE and FARE with mean
train$age[is.na(train$age)] <- mean(train$age, na.rm = TRUE)
train$fare[is.na(train$fare)] <- mean(train$fare, na.rm = TRUE)
test$age[is.na(test$age)] <- mean(test$age, na.rm = TRUE)
test$fare[is.na(test$fare)] <- mean(test$fare, na.rm = TRUE)
# Convert survived, sex, pclass, sibsp, parch & embarked to factors
train$survived <- factor(train$survived)
train$sex <- factor(train$sex)
train$pclass <- factor(train$pclass)
train$sibsp <- factor(train$sibsp)
train$parch <- factor(train$parch)
train$embarked <- factor(train$embarked)
test$sex <- factor(test$sex)
test$pclass <- factor(test$pclass)
test$sibsp <- factor(test$sibsp)
test$parch <- factor(test$parch)
test$embarked <- factor(test$embarked)
# Create the SVM model
svm.model <- ksvm(factor(survived) ~ factor(sex) + age + fare, data = train)
# Make a prediction with our SVM model
test$survived <- predict(svm.model, test, type = "response")
# save csv file for submission
write.csv(test, "svm-model-01.csv")
